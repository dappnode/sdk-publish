{"version":3,"file":"static/js/7055.4e426af4.chunk.js","mappings":"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","sources":["../node_modules/viem/errors/ccip.ts","../node_modules/viem/utils/ccip.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type OffchainLookupErrorType = OffchainLookupError & {\n  name: 'OffchainLookupError'\n}\nexport class OffchainLookupError extends BaseError {\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n        name: 'OffchainLookupError',\n      },\n    )\n  }\n}\n\nexport type OffchainLookupResponseMalformedErrorType =\n  OffchainLookupResponseMalformedError & {\n    name: 'OffchainLookupResponseMalformedError'\n  }\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n        name: 'OffchainLookupResponseMalformedError',\n      },\n    )\n  }\n}\n\n/** @internal */\nexport type OffchainLookupSenderMismatchErrorType =\n  OffchainLookupSenderMismatchError & {\n    name: 'OffchainLookupSenderMismatchError'\n  }\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n        name: 'OffchainLookupSenderMismatchError',\n      },\n    )\n  }\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  type OffchainLookupErrorType as OffchainLookupErrorType_,\n  OffchainLookupResponseMalformedError,\n  type OffchainLookupResponseMalformedErrorType,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n} from '../errors/request.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport {\n  localBatchGatewayRequest,\n  localBatchGatewayUrl,\n} from './ens/localBatchGatewayRequest.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport type OffchainLookupErrorType = OffchainLookupErrorType_ | ErrorType\n\nexport async function offchainLookup<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  })\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  const { ccipRead } = client\n  const ccipRequest_ =\n    ccipRead && typeof ccipRead?.request === 'function'\n      ? ccipRead.request\n      : ccipRequest\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = urls.includes(localBatchGatewayUrl)\n      ? await localBatchGatewayRequest({\n          data: callData,\n          ccipRequest: ccipRequest_,\n        })\n      : await ccipRequest_({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport type CcipRequestParameters = {\n  data: Hex\n  sender: Address\n  urls: readonly string[]\n}\n\nexport type CcipRequestReturnType = Hex\n\nexport type CcipRequestErrorType =\n  | HttpRequestErrorType\n  | OffchainLookupResponseMalformedErrorType\n  | ErrorType\n\nexport async function ccipRequest({\n  data,\n  sender,\n  urls,\n}: CcipRequestParameters): Promise<CcipRequestReturnType> {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method = url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n    const headers: HeadersInit =\n      method === 'POST' ? { 'Content-Type': 'application/json' } : {}\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender.toLowerCase()).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          headers,\n          method,\n        },\n      )\n\n      let result: any\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: result?.error\n            ? stringify(result.error)\n            : response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n"],"names":["OffchainLookupError","BaseError","constructor","_ref","_cause$metaMessages","callbackSelector","cause","data","extraData","sender","urls","super","shortMessage","metaMessages","length","map","url","concat","getUrl","flat","name","OffchainLookupResponseMalformedError","_ref2","result","stringify","OffchainLookupSenderMismatchError","_ref3","to","offchainLookupSignature","offchainLookupAbiItem","type","inputs","async","offchainLookup","client","blockNumber","blockTag","args","decodeErrorResult","abi","callData","ccipRead","ccipRequest_","request","ccipRequest","isAddressEqual","includes","localBatchGatewayUrl","localBatchGatewayRequest","data_","call","encodeAbiParameters","err","error","Error","i","method","body","undefined","headers","_response$headers$get","response","fetch","replace","toLowerCase","JSON","get","startsWith","json","text","ok","_result","HttpRequestError","details","statusText","status","isHex","message"],"sourceRoot":""}
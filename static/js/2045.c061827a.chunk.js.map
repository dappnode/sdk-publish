{"version":3,"file":"static/js/2045.c061827a.chunk.js","mappings":"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","sources":["../node_modules/@safe-global/safe-apps-sdk/src/version.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/utils.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/messageFormatter.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/methods.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/constants.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/signatures.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/permissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/wallet/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/decorators/requirePermissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/index.ts"],"sourcesContent":["export const getSDKVersion = () => '9.1.0';\n","// i.e. 0-255 -> '00'-'ff'\nconst dec2hex = (dec: number): string => dec.toString(16).padStart(2, '0');\n\nconst generateId = (len: number): string => {\n  const arr = new Uint8Array((len || 40) / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, dec2hex).join('');\n};\n\nconst generateRequestId = (): string => {\n  if (typeof window !== 'undefined') {\n    return generateId(10);\n  }\n\n  return new Date().getTime().toString(36);\n};\n\nexport { generateRequestId };\n","import { ErrorResponse, SDKRequestData, RequestId, SuccessResponse, MethodToResponse } from '../types/index.js';\nimport { getSDKVersion } from '../version.js';\nimport { Methods } from './methods.js';\nimport { generateRequestId } from './utils.js';\n\nclass MessageFormatter {\n  static makeRequest = <M extends Methods = Methods, P = unknown>(method: M, params: P): SDKRequestData<M, P> => {\n    const id = generateRequestId();\n\n    return {\n      id,\n      method,\n      params,\n      env: {\n        sdkVersion: getSDKVersion(),\n      },\n    };\n  };\n\n  static makeResponse = (id: RequestId, data: MethodToResponse[Methods], version: string): SuccessResponse => ({\n    id,\n    success: true,\n    version,\n    data,\n  });\n\n  static makeErrorResponse = (id: RequestId, error: string, version: string): ErrorResponse => ({\n    id,\n    success: false,\n    error,\n    version,\n  });\n}\n\nexport { MessageFormatter };\n","export enum Methods {\n  sendTransactions = 'sendTransactions',\n  rpcCall = 'rpcCall',\n  getChainInfo = 'getChainInfo',\n  getSafeInfo = 'getSafeInfo',\n  getTxBySafeTxHash = 'getTxBySafeTxHash',\n  getSafeBalances = 'getSafeBalances',\n  signMessage = 'signMessage',\n  signTypedMessage = 'signTypedMessage',\n  getEnvironmentInfo = 'getEnvironmentInfo',\n  getOffChainSignature = 'getOffChainSignature',\n  requestAddressBook = 'requestAddressBook',\n  wallet_getPermissions = 'wallet_getPermissions',\n  wallet_requestPermissions = 'wallet_requestPermissions',\n}\n\nexport enum RestrictedMethods {\n  requestAddressBook = 'requestAddressBook',\n}\n","import { MessageFormatter } from './messageFormatter.js';\nimport { Methods } from './methods.js';\nimport { InterfaceMessageEvent, Communicator, Response, SuccessResponse } from '../types/index.js';\n\n// eslint-disable-next-line\ntype Callback = (response: any) => void;\n\nclass PostMessageCommunicator implements Communicator {\n  private readonly allowedOrigins: RegExp[] | null = null;\n  private callbacks = new Map<string, Callback>();\n  private debugMode = false;\n  private isServer = typeof window === 'undefined';\n\n  constructor(allowedOrigins: RegExp[] | null = null, debugMode = false) {\n    this.allowedOrigins = allowedOrigins;\n    this.debugMode = debugMode;\n\n    if (!this.isServer) {\n      window.addEventListener('message', this.onParentMessage);\n    }\n  }\n\n  private isValidMessage = ({ origin, data, source }: InterfaceMessageEvent): boolean => {\n    const emptyOrMalformed = !data;\n    const sentFromParentEl = !this.isServer && source === window.parent;\n    const majorVersionNumber = typeof data.version !== 'undefined' && parseInt(data.version.split('.')[0]);\n    const allowedSDKVersion = typeof majorVersionNumber === 'number' && majorVersionNumber >= 1;\n    let validOrigin = true;\n    if (Array.isArray(this.allowedOrigins)) {\n      validOrigin = this.allowedOrigins.find((regExp) => regExp.test(origin)) !== undefined;\n    }\n\n    return !emptyOrMalformed && sentFromParentEl && allowedSDKVersion && validOrigin;\n  };\n\n  private logIncomingMessage = (msg: InterfaceMessageEvent): void => {\n    console.info(`Safe Apps SDK v1: A message was received from origin ${msg.origin}. `, msg.data);\n  };\n\n  private onParentMessage = (msg: InterfaceMessageEvent): void => {\n    if (this.isValidMessage(msg)) {\n      this.debugMode && this.logIncomingMessage(msg);\n      this.handleIncomingMessage(msg.data);\n    }\n  };\n\n  private handleIncomingMessage = (payload: InterfaceMessageEvent['data']): void => {\n    const { id } = payload;\n\n    const cb = this.callbacks.get(id);\n    if (cb) {\n      cb(payload);\n\n      this.callbacks.delete(id);\n    }\n  };\n\n  public send = <M extends Methods, P, R>(method: M, params: P): Promise<SuccessResponse<R>> => {\n    const request = MessageFormatter.makeRequest(method, params);\n\n    if (this.isServer) {\n      throw new Error(\"Window doesn't exist\");\n    }\n\n    window.parent.postMessage(request, '*');\n    return new Promise((resolve, reject) => {\n      this.callbacks.set(request.id, (response: Response<R>) => {\n        if (!response.success) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nexport default PostMessageCommunicator;\nexport * from './methods.js';\n","import { ChainInfo as _ChainInfo } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type ChainInfo = Pick<\n  _ChainInfo,\n  'chainName' | 'chainId' | 'shortName' | 'nativeCurrency' | 'blockExplorerUriTemplate'\n>;\n\nexport { NativeCurrency } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type BaseTransaction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type GetTxBySafeTxHashParams = {\n  safeTxHash: string;\n};\n\nexport interface SendTransactionRequestParams {\n  safeTxGas?: number;\n}\n\nexport interface SendTransactionsParams {\n  txs: BaseTransaction[];\n  params?: SendTransactionRequestParams;\n}\n\nexport type GetBalanceParams = { currency?: string };\n\nexport type SignMessageParams = {\n  message: string;\n};\n\nexport interface TypedDataDomain {\n  name?: string;\n  version?: string;\n  chainId?: string | number | bigint | { toNumber: () => number };\n  verifyingContract?: string;\n  salt?: string;\n}\n\nexport interface TypedDataTypes {\n  name: string;\n  type: string;\n}\n\nexport type TypedMessageTypes = { [key: string]: TypedDataTypes[] };\n\nexport type EIP712TypedData = {\n  domain: TypedDataDomain;\n  types: TypedMessageTypes;\n  message: Record<string, any>;\n  primaryType?: string;\n};\n\nexport type SignTypedMessageParams = {\n  typedData: EIP712TypedData;\n};\n\nexport type SendTransactionsResponse = {\n  safeTxHash: string;\n};\n\nexport type OffChainSignMessageResponse = {\n  messageHash: string;\n};\n\nexport type SignMessageResponse = SendTransactionsResponse | OffChainSignMessageResponse;\n\nexport type SafeInfo = {\n  safeAddress: string;\n  chainId: number;\n  threshold: number;\n  owners: string[];\n  isReadOnly: boolean;\n};\n\nexport type SafeInfoExtended = SafeInfo & {\n  nonce: number;\n  implementation: string;\n  modules: string[] | null;\n  fallbackHandler: string | null;\n  guard: string | null;\n  version: string | null;\n};\n\nexport type EnvironmentInfo = {\n  origin: string;\n};\n\nexport type PostMessageOptions = {\n  transfer?: any[];\n};\n\nexport type AddressBookItem = {\n  address: string;\n  chainId: string;\n  name: string;\n};\n\nexport const isObjectEIP712TypedData = (obj?: unknown): obj is EIP712TypedData => {\n  return typeof obj === 'object' && obj != null && 'domain' in obj && 'types' in obj && 'message' in obj;\n};\n","import { Methods } from '../communication/methods.js';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n  SignMessageResponse,\n} from '../types/index.js';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SignMessageResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SignMessageResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SignMessageResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SignMessageResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n","export const RPC_CALLS = {\n  eth_call: 'eth_call',\n  eth_gasPrice: 'eth_gasPrice',\n  eth_getLogs: 'eth_getLogs',\n  eth_getBalance: 'eth_getBalance',\n  eth_getCode: 'eth_getCode',\n  eth_getBlockByHash: 'eth_getBlockByHash',\n  eth_getBlockByNumber: 'eth_getBlockByNumber',\n  eth_getStorageAt: 'eth_getStorageAt',\n  eth_getTransactionByHash: 'eth_getTransactionByHash',\n  eth_getTransactionReceipt: 'eth_getTransactionReceipt',\n  eth_getTransactionCount: 'eth_getTransactionCount',\n  eth_estimateGas: 'eth_estimateGas',\n  safe_setSettings: 'safe_setSettings',\n} as const;\n","import { RPC_CALLS } from '../eth/constants.js';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n  SafeSettings,\n} from '../types/index.js';\nimport { Methods } from '../communication/methods.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n  public setSafeSettings;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n    this.setSafeSettings = this.buildRequest<[SafeSettings], SafeSettings>({\n      call: RPC_CALLS.safe_setSettings,\n    });\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n","const MAGIC_VALUE = '0x1626ba7e';\nconst MAGIC_VALUE_BYTES = '0x20c13b0b';\n\nexport { MAGIC_VALUE, MAGIC_VALUE_BYTES };\n","export type Permission = {\n  parentCapability: string;\n  invoker: string;\n  date?: number;\n  caveats?: PermissionCaveat[];\n};\n\nexport type PermissionRequest = {\n  [method: string]: Record<string, unknown>;\n};\n\nexport type PermissionCaveat = {\n  type: string;\n  value?: unknown;\n  name?: string;\n};\n\nexport const PERMISSIONS_REQUEST_REJECTED = 4001;\n\nexport class PermissionsError extends Error {\n  public code: number;\n  public data?: unknown;\n\n  constructor(message: string, code: number, data?: unknown) {\n    super(message);\n\n    this.code = code;\n    this.data = data;\n\n    // Should adjust prototype manually because how TS handles the type extension compilation\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, PermissionsError.prototype);\n  }\n}\n","import { Methods, RestrictedMethods } from '../communication/methods.js';\nimport { Communicator } from '../types/index.js';\nimport { PermissionRequest, Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nclass Wallet {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getPermissions(): Promise<Permission[]> {\n    const response = await this.communicator.send<Methods.wallet_getPermissions, undefined, Permission[]>(\n      Methods.wallet_getPermissions,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async requestPermissions(permissions: PermissionRequest[]): Promise<Permission[]> {\n    if (!this.isPermissionRequestValid(permissions)) {\n      throw new PermissionsError('Permissions request is invalid', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    try {\n      const response = await this.communicator.send<\n        Methods.wallet_requestPermissions,\n        PermissionRequest[],\n        Permission[]\n      >(Methods.wallet_requestPermissions, permissions);\n\n      return response.data;\n    } catch {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n  }\n\n  isPermissionRequestValid(permissions: PermissionRequest[]): boolean {\n    return permissions.every((pr: PermissionRequest) => {\n      if (typeof pr === 'object') {\n        return Object.keys(pr).every((method) => {\n          if (Object.values(RestrictedMethods).includes(method as RestrictedMethods)) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      return false;\n    });\n  }\n}\n\nexport { Wallet };\n","import { Methods } from '../communication/index.js';\nimport { Safe } from '../safe/index.js';\nimport { Wallet } from '../wallet/index.js';\n\nimport { Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nconst hasPermission = (required: Methods, permissions: Permission[]): boolean =>\n  permissions.some((permission) => permission.parentCapability === required);\n\nconst requirePermission = () => (_: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = async function () {\n    // @ts-expect-error accessing private property from decorator. 'this' context is the class instance\n    const wallet = new Wallet((this as Safe).communicator);\n\n    let currentPermissions = await wallet.getPermissions();\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      currentPermissions = await wallet.requestPermissions([{ [propertyKey as Methods]: {} }]);\n    }\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    return originalMethod.apply(this);\n  };\n\n  return descriptor;\n};\n\nexport default requirePermission;\n","import { encodeFunctionData, Address, hashMessage, hashTypedData } from 'viem';\nimport { MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures.js';\nimport { Methods } from '../communication/methods.js';\nimport { RPC_CALLS } from '../eth/constants.js';\nimport {\n  Communicator,\n  ChainInfo,\n  SafeBalances,\n  GetBalanceParams,\n  RPCPayload,\n  TransactionConfig,\n  EnvironmentInfo,\n  AddressBookItem,\n  isObjectEIP712TypedData,\n  EIP712TypedData,\n  SafeInfoExtended,\n} from '../types/index.js';\nimport requirePermission from '../decorators/requirePermissions.js';\n\nclass Safe {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo(): Promise<ChainInfo> {\n    const response = await this.communicator.send<Methods.getChainInfo, undefined, ChainInfo>(\n      Methods.getChainInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async getInfo(): Promise<SafeInfoExtended> {\n    const response = await this.communicator.send<Methods.getSafeInfo, undefined, SafeInfoExtended>(\n      Methods.getSafeInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({ currency = 'usd' }: GetBalanceParams = {}): Promise<SafeBalances> {\n    const response = await this.communicator.send<Methods.getSafeBalances, { currency: string }, SafeBalances>(\n      Methods.getSafeBalances,\n      {\n        currency,\n      },\n    );\n\n    return response.data;\n  }\n\n  private async check1271Signature(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_dataHash',\n              type: 'bytes32',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async check1271SignatureBytes(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_data',\n              type: 'bytes',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message: string): string {\n    return hashMessage(message);\n  }\n\n  calculateTypedMessageHash(typedMessage: EIP712TypedData): string {\n    const chainId =\n      typeof typedMessage.domain.chainId === 'object'\n        ? typedMessage.domain.chainId.toNumber()\n        : Number(typedMessage.domain.chainId);\n\n    let primaryType = typedMessage.primaryType;\n    if (!primaryType) {\n      const fields = Object.values(typedMessage.types);\n      // We try to infer primaryType (simplified ether's version)\n      const primaryTypes = Object.keys(typedMessage.types).filter((typeName) =>\n        fields.every((dataTypes) => dataTypes.every(({ type }) => type.replace('[', '').replace(']', '') !== typeName)),\n      );\n      if (primaryTypes.length === 0 || primaryTypes.length > 1) throw new Error('Please specify primaryType');\n      primaryType = primaryTypes[0];\n    }\n\n    return hashTypedData({\n      message: typedMessage.message,\n      domain: {\n        ...typedMessage.domain,\n        chainId,\n        verifyingContract: typedMessage.domain.verifyingContract as Address,\n        salt: typedMessage.domain.salt as Address,\n      },\n      types: typedMessage.types,\n      primaryType,\n    });\n  }\n\n  async getOffChainSignature(messageHash: string): Promise<string> {\n    const response = await this.communicator.send<Methods.getOffChainSignature, string, string>(\n      Methods.getOffChainSignature,\n      messageHash,\n    );\n\n    return response.data;\n  }\n\n  async isMessageSigned(message: string | EIP712TypedData, signature = '0x'): Promise<boolean> {\n    let check: (() => Promise<boolean>) | undefined;\n    if (typeof message === 'string') {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n\n    if (isObjectEIP712TypedData(message)) {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n\n      return isValid;\n    }\n\n    throw new Error('Invalid message type');\n  }\n\n  async isMessageHashSigned(messageHash: string, signature = '0x'): Promise<boolean> {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getEnvironmentInfo(): Promise<EnvironmentInfo> {\n    const response = await this.communicator.send<Methods.getEnvironmentInfo, undefined, EnvironmentInfo>(\n      Methods.getEnvironmentInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  @requirePermission()\n  async requestAddressBook(): Promise<AddressBookItem[]> {\n    const response = await this.communicator.send<Methods.requestAddressBook, undefined, AddressBookItem[]>(\n      Methods.requestAddressBook,\n      undefined,\n    );\n\n    return response.data;\n  }\n}\n\nexport { Safe };\n","import { Communicator } from './types/index.js';\nimport InterfaceCommunicator from './communication/index.js';\nimport { TXs } from './txs/index.js';\nimport { Eth } from './eth/index.js';\nimport { Safe } from './safe/index.js';\nimport { Wallet } from './wallet/index.js';\n\nexport type Opts = {\n  allowedDomains?: RegExp[];\n  debug?: boolean;\n};\n\nclass SafeAppsSDK {\n  private readonly communicator: Communicator;\n  public readonly eth: Eth;\n  public readonly txs: TXs;\n  public readonly safe: Safe;\n  public readonly wallet: Wallet;\n\n  constructor(opts: Opts = {}) {\n    const { allowedDomains = null, debug = false } = opts;\n\n    this.communicator = new InterfaceCommunicator(allowedDomains, debug);\n    this.eth = new Eth(this.communicator);\n    this.txs = new TXs(this.communicator);\n    this.safe = new Safe(this.communicator);\n    this.wallet = new Wallet(this.communicator);\n  }\n}\n\nexport default SafeAppsSDK;\n","import SDK from './sdk.js';\n\nexport default SDK;\nexport * from './sdk.js';\nexport * from './types/index.js';\nexport * from './communication/methods.js';\nexport * from './communication/messageFormatter.js';\nexport { getSDKVersion } from './version.js';\nexport * from './eth/constants.js';\n"],"names":["dec2hex","dec","toString","padStart","generateRequestId","window","len","arr","Uint8Array","crypto","getRandomValues","Array","from","join","generateId","Date","getTime","MessageFormatter","Methods","RestrictedMethods","makeRequest","method","params","id","env","sdkVersion","makeResponse","data","version","success","makeErrorResponse","error","constructor","allowedOrigins","arguments","length","undefined","debugMode","callbacks","Map","isServer","isValidMessage","_ref","origin","source","emptyOrMalformed","sentFromParentEl","this","parent","majorVersionNumber","parseInt","split","allowedSDKVersion","validOrigin","isArray","find","regExp","test","logIncomingMessage","msg","console","info","concat","onParentMessage","handleIncomingMessage","payload","cb","get","delete","send","request","Error","postMessage","Promise","resolve","reject","set","response","addEventListener","isObjectEIP712TypedData","obj","TXs","communicator","getBySafeTxHash","safeTxHash","getTxBySafeTxHash","signMessage","message","messagePayload","signTypedMessage","typedData","txs","sendTransactions","RPC_CALLS","inputFormatters","defaultBlockParam","returnFullTxObjectParam","blockNumberToHex","arg","Number","isInteger","Eth","call","buildRequest","formatters","getBalance","getCode","getStorageAt","getPastLogs","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionReceipt","getTransactionCount","getGasPrice","getEstimateGas","transaction","setSafeSettings","args","async","forEach","formatter","i","rpcCall","PERMISSIONS_REQUEST_REJECTED","PermissionsError","code","super","Object","setPrototypeOf","prototype","Wallet","getPermissions","wallet_getPermissions","requestPermissions","permissions","isPermissionRequestValid","wallet_requestPermissions","every","pr","keys","values","includes","hasPermission","required","some","permission","parentCapability","requirePermission","_","propertyKey","descriptor","originalMethod","value","wallet","currentPermissions","apply","Safe","getChainInfo","getInfo","getSafeInfo","experimental_getBalances","currency","getSafeBalances","check1271Signature","messageHash","signature","safeInfo","encodedIsValidSignatureCall","encodeFunctionData","abi","constant","inputs","name","type","outputs","payable","stateMutability","functionName","to","safeAddress","slice","toLowerCase","err","check1271SignatureBytes","calculateMessageHash","hashMessage","calculateTypedMessageHash","typedMessage","chainId","domain","toNumber","primaryType","fields","types","primaryTypes","filter","typeName","dataTypes","replace","hashTypedData","verifyingContract","salt","getOffChainSignature","isMessageSigned","check","isMessageHashSigned","checks","bind","getEnvironmentInfo","requestAddressBook","__decorate","opts","allowedDomains","debug","InterfaceCommunicator","eth","safe"],"sourceRoot":""}
{"version":3,"file":"static/js/7754.b3a89683.chunk.js","mappings":";mIAMM,MAAOA,UAAgCC,EAAAA,GAQ3CC,WAAAA,CAAYC,EAAaC,GACvBC,QAJM,KAAAC,UAAW,EACX,KAAAC,WAAY,GAIlBC,EAAAA,EAAAA,IAAML,GACN,MAAMM,GAAMC,EAAAA,EAAAA,IAAQN,GAEpB,GADAO,KAAKC,MAAQT,EAAKU,SACe,oBAAtBF,KAAKC,MAAME,OACpB,MAAM,IAAIC,MAAM,uDAClBJ,KAAKK,SAAWL,KAAKC,MAAMI,SAC3BL,KAAKM,UAAYN,KAAKC,MAAMK,UAC5B,MAAMD,EAAWL,KAAKK,SAChBE,EAAM,IAAIC,WAAWH,GAE3BE,EAAIE,IAAIX,EAAIY,OAASL,EAAWb,EAAKU,SAASC,OAAOL,GAAKa,SAAWb,GACrE,IAAK,IAAIc,EAAI,EAAGA,EAAIL,EAAIG,OAAQE,IAAKL,EAAIK,IAAM,GAC/CZ,KAAKC,MAAME,OAAOI,GAElBP,KAAKa,MAAQrB,EAAKU,SAElB,IAAK,IAAIU,EAAI,EAAGA,EAAIL,EAAIG,OAAQE,IAAKL,EAAIK,IAAM,IAC/CZ,KAAKa,MAAMV,OAAOI,IAClBO,EAAAA,EAAAA,IAAMP,EACR,CACAJ,MAAAA,CAAOY,GAGL,OAFAC,EAAAA,EAAAA,IAAQhB,MACRA,KAAKC,MAAME,OAAOY,GACXf,IACT,CACAiB,UAAAA,CAAWC,IACTF,EAAAA,EAAAA,IAAQhB,OACRmB,EAAAA,EAAAA,IAAOD,EAAKlB,KAAKM,WACjBN,KAAKL,UAAW,EAChBK,KAAKC,MAAMgB,WAAWC,GACtBlB,KAAKa,MAAMV,OAAOe,GAClBlB,KAAKa,MAAMI,WAAWC,GACtBlB,KAAKoB,SACP,CACAT,MAAAA,GACE,MAAMO,EAAM,IAAIV,WAAWR,KAAKa,MAAMP,WAEtC,OADAN,KAAKiB,WAAWC,GACTA,CACT,CACAG,UAAAA,CAAWC,GAETA,IAAAA,EAAOC,OAAOrB,OAAOqB,OAAOC,eAAexB,MAAO,CAAC,IACnD,MAAM,MAAEa,EAAK,MAAEZ,EAAK,SAAEN,EAAQ,UAAEC,EAAS,SAAES,EAAQ,UAAEC,GAAcN,KAQnE,OANAsB,EAAG3B,SAAWA,EACd2B,EAAG1B,UAAYA,EACf0B,EAAGjB,SAAWA,EACdiB,EAAGhB,UAAYA,EACfgB,EAAGT,MAAQA,EAAMQ,WAAWC,EAAGT,OAC/BS,EAAGrB,MAAQA,EAAMoB,WAAWC,EAAGrB,OACxBqB,CACT,CACAG,KAAAA,GACE,OAAOzB,KAAKqB,YACd,CACAD,OAAAA,GACEpB,KAAKJ,WAAY,EACjBI,KAAKa,MAAMO,UACXpB,KAAKC,MAAMmB,SACb,EAaK,MAAMM,EAGTA,CAAClC,EAAaM,EAAY6B,IAC5B,IAAItC,EAAUG,EAAMM,GAAKK,OAAOwB,GAAShB,SAC3Ce,EAAKxB,OAAS,CAACV,EAAaM,IAAe,IAAIT,EAAUG,EAAMM,mFCnF/D,MAAM8B,EAAsBC,OAAO,GAC7BC,EAAsBD,OAAO,GAW7B,SAAUE,EAAQC,GACtB,OAAOA,aAAaxB,YAAeyB,YAAYC,OAAOF,IAA6B,eAAvBA,EAAEzC,YAAY4C,IAC5E,CAEM,SAAUhB,EAAOiB,GACrB,IAAKL,EAAQK,GAAO,MAAM,IAAIhC,MAAM,sBACtC,CAEM,SAAUiC,EAAMC,EAAeC,GACnC,GAAqB,mBAAVA,EAAqB,MAAM,IAAInC,MAAMkC,EAAQ,0BAA4BC,EACtF,CAGM,SAAUC,EAAoBC,GAClC,MAAMC,EAAMD,EAAIE,SAAS,IACzB,OAAoB,EAAbD,EAAIhC,OAAa,IAAMgC,EAAMA,CACtC,CAEM,SAAUE,EAAYF,GAC1B,GAAmB,kBAARA,EAAkB,MAAM,IAAItC,MAAM,mCAAqCsC,GAClF,MAAe,KAARA,EAAad,EAAMC,OAAO,KAAOa,EAC1C,CAGA,MAAMG,EAEiC,oBAA9BrC,WAAWsC,KAAK,IAAIC,OAAsD,oBAAvBvC,WAAWwC,QAGjEC,EAAwBC,MAAMJ,KAAK,CAAEpC,OAAQ,MAAO,CAACyC,EAAGvC,IAC5DA,EAAE+B,SAAS,IAAIS,SAAS,EAAG,OAOvB,SAAUC,EAAWC,GAGzB,GAFAnC,EAAOmC,GAEHT,EAAe,OAAOS,EAAMP,QAEhC,IAAIL,EAAM,GACV,IAAK,IAAI9B,EAAI,EAAGA,EAAI0C,EAAM5C,OAAQE,IAChC8B,GAAOO,EAAMK,EAAM1C,IAErB,OAAO8B,CACT,CAGA,MAAMa,EAAS,CAAEC,GAAI,GAAIC,GAAI,GAAIC,EAAG,GAAIC,EAAG,GAAI3B,EAAG,GAAI4B,EAAG,KACzD,SAASC,EAAcC,GACrB,OAAIA,GAAMP,EAAOC,IAAMM,GAAMP,EAAOE,GAAWK,EAAKP,EAAOC,GACvDM,GAAMP,EAAOG,GAAKI,GAAMP,EAAOI,EAAUG,GAAMP,EAAOG,EAAI,IAC1DI,GAAMP,EAAOvB,GAAK8B,GAAMP,EAAOK,EAAUE,GAAMP,EAAOvB,EAAI,SAA9D,CAEF,CAMM,SAAU+B,EAAWrB,GACzB,GAAmB,kBAARA,EAAkB,MAAM,IAAItC,MAAM,mCAAqCsC,GAElF,GAAIG,EAAe,OAAOrC,WAAWwC,QAAQN,GAC7C,MAAMsB,EAAKtB,EAAIhC,OACTuD,EAAKD,EAAK,EAChB,GAAIA,EAAK,EAAG,MAAM,IAAI5D,MAAM,mDAAqD4D,GACjF,MAAME,EAAQ,IAAI1D,WAAWyD,GAC7B,IAAK,IAAIE,EAAK,EAAGC,EAAK,EAAGD,EAAKF,EAAIE,IAAMC,GAAM,EAAG,CAC/C,MAAMC,EAAKR,EAAcnB,EAAI4B,WAAWF,IAClCG,EAAKV,EAAcnB,EAAI4B,WAAWF,EAAK,IAC7C,QAAWI,IAAPH,QAA2BG,IAAPD,EAAkB,CACxC,MAAME,EAAO/B,EAAI0B,GAAM1B,EAAI0B,EAAK,GAChC,MAAM,IAAIhE,MAAM,+CAAiDqE,EAAO,cAAgBL,EAC1F,CACAF,EAAMC,GAAW,GAALE,EAAUE,CACxB,CACA,OAAOL,CACT,CAGM,SAAUQ,EAAgBpB,GAC9B,OAAOV,EAAYS,EAAWC,GAChC,CACM,SAAUqB,EAAgBrB,GAE9B,OADAnC,EAAOmC,GACAV,EAAYS,EAAW7C,WAAWsC,KAAKQ,GAAOsB,WACvD,CAEM,SAAUC,EAAgBC,EAAoBC,GAClD,OAAOhB,EAAWe,EAAEnC,SAAS,IAAIS,SAAe,EAAN2B,EAAS,KACrD,CACM,SAAUC,EAAgBF,EAAoBC,GAClD,OAAOF,EAAgBC,EAAGC,GAAKH,SACjC,CAeM,SAAUK,EAAY3C,EAAeI,EAAUwC,GACnD,IAAIC,EACJ,GAAmB,kBAARzC,EACT,IACEyC,EAAMpB,EAAWrB,EACnB,CAAE,MAAO0C,GACP,MAAM,IAAIhF,MAAMkC,EAAQ,6CAA+C8C,EACzE,KACK,KAAIrD,EAAQW,GAKjB,MAAM,IAAItC,MAAMkC,EAAQ,qCAFxB6C,EAAM3E,WAAWsC,KAAKJ,EAGxB,CACA,MAAMqC,EAAMI,EAAIzE,OAChB,GAA8B,kBAAnBwE,GAA+BH,IAAQG,EAChD,MAAM,IAAI9E,MAAMkC,EAAQ,cAAgB4C,EAAiB,kBAAoBH,GAC/E,OAAOI,CACT,CAKM,SAAUE,IACd,IAAIC,EAAM,EACV,IAAK,IAAI1E,EAAI,EAAGA,EAAI2E,UAAO7E,OAAQE,IAAK,CACtC,MAAMoB,EAAWpB,EAAC,GAAA2E,UAAA7E,QAADE,OAAC4D,EAAAe,UAAD3E,GACjBO,EAAOa,GACPsD,GAAOtD,EAAEtB,MACX,CACA,MAAMyE,EAAM,IAAI3E,WAAW8E,GAC3B,IAAK,IAAI1E,EAAI,EAAGL,EAAM,EAAGK,EAAI2E,UAAO7E,OAAQE,IAAK,CAC/C,MAAMoB,EAAWpB,EAAC,GAAA2E,UAAA7E,QAADE,OAAC4D,EAAAe,UAAD3E,GACjBuE,EAAI1E,IAAIuB,EAAGzB,GACXA,GAAOyB,EAAEtB,MACX,CACA,OAAOyE,CACT,CAuBA,MAAMK,EAAYV,GAA2B,kBAANA,GAAkBlD,GAAOkD,EAE1D,SAAUW,EAAQX,EAAWY,EAAaC,GAC9C,OAAOH,EAASV,IAAMU,EAASE,IAAQF,EAASG,IAAQD,GAAOZ,GAAKA,EAAIa,CAC1E,CAOM,SAAUC,EAAStD,EAAewC,EAAWY,EAAaC,GAM9D,IAAKF,EAAQX,EAAGY,EAAKC,GACnB,MAAM,IAAIvF,MAAM,kBAAoBkC,EAAQ,KAAOoD,EAAM,WAAaC,EAAM,SAAWb,EAC3F,CAmCO,MAAMe,EAAWf,IAAuBhD,GAAOD,OAAOiD,IAAMhD,EAI7DgE,EAAOf,GAAgB,IAAIvE,WAAWuE,GACtCgB,EAAQC,GAA2BxF,WAAWsC,KAAKkD,GA6DzD,MAAMC,EAAe,CACnBC,OAASC,GAAqC,kBAARA,EACtCC,SAAWD,GAAqC,oBAARA,EACxCE,QAAUF,GAAqC,mBAARA,EACvCG,OAASH,GAAqC,kBAARA,EACtCI,mBAAqBJ,GAAqC,kBAARA,GAAoBpE,EAAQoE,GAC9EK,cAAgBL,GAAsBM,OAAOD,cAAcL,GAC3DjC,MAAQiC,GAAsBjD,MAAMwD,QAAQP,GAC5CQ,MAAOA,CAACR,EAAUS,IAAsBA,EAAeC,GAAGC,QAAQX,GAClE3G,KAAO2G,GAAqC,oBAARA,GAAsBM,OAAOD,cAAcL,EAAI7F,YAM/E,SAAUyG,EACdH,EACAI,GAC6B,IAA7BC,EAAA1B,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAA2B,CAAC,EAE5B,MAAM2B,EAAaA,CAACC,EAAoBC,EAAiBC,KACvD,MAAMC,EAAWrB,EAAamB,GAC9B,GAAwB,oBAAbE,EAAyB,MAAM,IAAIlH,MAAM,8BAEpD,MAAM+F,EAAMS,EAAOO,GACnB,KAAIE,QAAsB7C,IAAR2B,KACbmB,EAASnB,EAAKS,GACjB,MAAM,IAAIxG,MACR,SAAWmH,OAAOJ,GAAa,yBAA2BC,EAAO,SAAWjB,EAEhF,EAEF,IAAK,MAAOgB,EAAWC,KAAS7F,OAAOiG,QAAQR,GAAaE,EAAWC,EAAWC,GAAO,GACzF,IAAK,MAAOD,EAAWC,KAAS7F,OAAOiG,QAAQP,GAAgBC,EAAWC,EAAWC,GAAO,GAC5F,OAAOR,CACT,CAqBM,SAAUa,EACdC,GAEA,MAAMC,EAAM,IAAIC,QAChB,OAAO,SAACC,GACN,MAAM1B,EAAMwB,EAAIG,IAAID,GACpB,QAAYrD,IAAR2B,EAAmB,OAAOA,EAAI,QAAA4B,EAAAxC,UAAA7E,OAFjBsH,EAAO,IAAA9E,MAAA6E,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAPD,EAAOC,EAAA,GAAA1C,UAAA0C,GAGxB,MAAMC,EAAWR,EAAGG,KAAQG,GAE5B,OADAL,EAAIlH,IAAIoH,EAAKK,GACNA,CACT,CACF,CC1WA,MAAMtG,EAAMC,OAAO,GAAIC,EAAMD,OAAO,GAAIsG,EAAsBtG,OAAO,GAAIuG,EAAsBvG,OAAO,GAEhGwG,EAAsBxG,OAAO,GAAIyG,EAAsBzG,OAAO,GAAI0G,EAAsB1G,OAAO,GAG/F,SAAU2G,EAAIxG,EAAWyG,GAC7B,MAAMC,EAAS1G,EAAIyG,EACnB,OAAOC,GAAU9G,EAAM8G,EAASD,EAAIC,CACtC,CAaM,SAAUC,EAAKC,EAAWC,EAAeC,GAC7C,IAAI3D,EAAMyD,EACV,KAAOC,KAAUjH,GACfuD,GAAOA,EACPA,GAAO2D,EAET,OAAO3D,CACT,CAMM,SAAU4D,EAAOC,EAAgBF,GACrC,GAAIE,IAAWpH,EAAK,MAAM,IAAIxB,MAAM,oCACpC,GAAI0I,GAAUlH,EAAK,MAAM,IAAIxB,MAAM,0CAA4C0I,GAE/E,IAAI9G,EAAIwG,EAAIQ,EAAQF,GAChBL,EAAIK,EAEJF,EAAIhH,EAAKqH,EAAInH,EAAKoH,EAAIpH,EAAKqH,EAAIvH,EACnC,KAAOI,IAAMJ,GAAK,CAEhB,MAAMwH,EAAIX,EAAIzG,EACRqH,EAAIZ,EAAIzG,EACRsH,EAAIV,EAAIM,EAAIE,EACZtE,EAAImE,EAAIE,EAAIC,EAElBX,EAAIzG,EAAGA,EAAIqH,EAAGT,EAAIM,EAAGD,EAAIE,EAAGD,EAAII,EAAGH,EAAIrE,CACzC,CAEA,GADY2D,IACA3G,EAAK,MAAM,IAAI1B,MAAM,0BACjC,OAAOoI,EAAII,EAAGE,EAChB,CAMA,SAASS,EAAa1C,EAAe/B,GACnC,MAAM0E,GAAU3C,EAAG4C,MAAQ3H,GAAOuG,EAC5BqB,EAAO7C,EAAG8C,IAAI7E,EAAG0E,GAEvB,IAAK3C,EAAG+C,IAAI/C,EAAGgD,IAAIH,GAAO5E,GAAI,MAAM,IAAI1E,MAAM,2BAC9C,OAAOsJ,CACT,CAEA,SAASI,EAAajD,EAAe/B,GACnC,MAAMiF,GAAUlD,EAAG4C,MAAQnB,GAAOC,EAC5BhE,EAAKsC,EAAGmD,IAAIlF,EAAGqD,GACfgB,EAAItC,EAAG8C,IAAIpF,EAAIwF,GACfE,EAAKpD,EAAGmD,IAAIlF,EAAGqE,GACfvI,EAAIiG,EAAGmD,IAAInD,EAAGmD,IAAIC,EAAI9B,GAAMgB,GAC5BO,EAAO7C,EAAGmD,IAAIC,EAAIpD,EAAGqD,IAAItJ,EAAGiG,EAAGsD,MACrC,IAAKtD,EAAG+C,IAAI/C,EAAGgD,IAAIH,GAAO5E,GAAI,MAAM,IAAI1E,MAAM,2BAC9C,OAAOsJ,CACT,CA2GM,SAAUU,EAAOC,GAErB,OAAIA,EAAIhC,IAAQD,EAAYmB,EAExBc,EAAI9B,IAAQD,EAAYwB,EA/ExB,SAAwBO,GAE5B,GAAIA,EAAIxI,OAAO,GAAI,MAAM,IAAIzB,MAAM,uCAEnC,IAAIkK,EAAID,EAAIvI,EACRyI,EAAI,EACR,KAAOD,EAAInC,IAAQvG,GACjB0I,GAAKnC,EACLoC,IAIF,IAAIC,EAAIrC,EACR,MAAMsC,EAAMC,EAAML,GAClB,KAA8B,IAAvBM,EAAWF,EAAKD,IAGrB,GAAIA,IAAM,IAAM,MAAM,IAAIpK,MAAM,iDAGlC,GAAU,IAANmK,EAAS,OAAOhB,EAIpB,IAAIqB,EAAKH,EAAId,IAAIa,EAAGF,GACpB,MAAMO,GAAUP,EAAIxI,GAAOqG,EAC3B,OAAO,SAAwBtB,EAAe/B,GAC5C,GAAI+B,EAAGiE,IAAIhG,GAAI,OAAOA,EAEtB,GAA0B,IAAtB6F,EAAW9D,EAAI/B,GAAU,MAAM,IAAI1E,MAAM,2BAG7C,IAAI2K,EAAIR,EACJS,EAAInE,EAAGmD,IAAInD,EAAGsD,IAAKS,GACnBK,EAAIpE,EAAG8C,IAAI7E,EAAGwF,GACdY,EAAIrE,EAAG8C,IAAI7E,EAAG+F,GAIlB,MAAQhE,EAAG+C,IAAIqB,EAAGpE,EAAGsD,MAAM,CACzB,GAAItD,EAAGiE,IAAIG,GAAI,OAAOpE,EAAGsE,KACzB,IAAIvK,EAAI,EAGJwK,EAAQvE,EAAGgD,IAAIoB,GACnB,MAAQpE,EAAG+C,IAAIwB,EAAOvE,EAAGsD,MAGvB,GAFAvJ,IACAwK,EAAQvE,EAAGgD,IAAIuB,GACXxK,IAAMmK,EAAG,MAAM,IAAI3K,MAAM,2BAI/B,MAAMiL,EAAWvJ,GAAOD,OAAOkJ,EAAInK,EAAI,GACjC6H,EAAI5B,EAAG8C,IAAIqB,EAAGK,GAGpBN,EAAInK,EACJoK,EAAInE,EAAGgD,IAAIpB,GACXwC,EAAIpE,EAAGmD,IAAIiB,EAAGD,GACdE,EAAIrE,EAAGmD,IAAIkB,EAAGzC,EAChB,CACA,OAAOyC,CACT,CACF,CAmBSI,CAAcjB,EACvB,CAGO,MA8CDkB,EAAe,CACnB,SAAU,UAAW,MAAO,MAAO,MAAO,OAAQ,MAClD,MAAO,MAAO,MAAO,MAAO,MAAO,MACnC,OAAQ,OAAQ,OAAQ,QAsBpB,SAAUC,EAAS3E,EAAepE,EAAQoG,GAC9C,GAAIA,EAAQjH,EAAK,MAAM,IAAIxB,MAAM,2CACjC,GAAIyI,IAAUjH,EAAK,OAAOiF,EAAGsD,IAC7B,GAAItB,IAAU/G,EAAK,OAAOW,EAC1B,IAAIgJ,EAAI5E,EAAGsD,IACPuB,EAAIjJ,EACR,KAAOoG,EAAQjH,GACTiH,EAAQ/G,IAAK2J,EAAI5E,EAAGmD,IAAIyB,EAAGC,IAC/BA,EAAI7E,EAAGgD,IAAI6B,GACX7C,IAAU/G,EAEZ,OAAO2J,CACT,CAOM,SAAUE,EAAiB9E,EAAe+E,GAA2B,IAAhBC,EAAQtG,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,IAAAA,UAAA,GACjE,MAAMuG,EAAW,IAAI5I,MAAM0I,EAAKlL,QAAQqL,KAAKF,EAAWhF,EAAGsE,UAAO3G,GAE5DwH,EAAgBJ,EAAKK,QAAO,CAACC,EAAKzJ,EAAK7B,IACvCiG,EAAGiE,IAAIrI,GAAayJ,GACxBJ,EAASlL,GAAKsL,EACPrF,EAAGmD,IAAIkC,EAAKzJ,KAClBoE,EAAGsD,KAEAgC,EAActF,EAAGuF,IAAIJ,GAO3B,OALAJ,EAAKS,aAAY,CAACH,EAAKzJ,EAAK7B,IACtBiG,EAAGiE,IAAIrI,GAAayJ,GACxBJ,EAASlL,GAAKiG,EAAGmD,IAAIkC,EAAKJ,EAASlL,IAC5BiG,EAAGmD,IAAIkC,EAAKzJ,KAClB0J,GACIL,CACT,CAgBM,SAAUnB,EAAc9D,EAAe/B,GAG3C,MAAMwH,GAAUzF,EAAG4C,MAAQ3H,GAAOqG,EAC5BoE,EAAU1F,EAAG8C,IAAI7E,EAAGwH,GACpBE,EAAM3F,EAAG+C,IAAI2C,EAAS1F,EAAGsD,KACzBsC,EAAO5F,EAAG+C,IAAI2C,EAAS1F,EAAGsE,MAC1BuB,EAAK7F,EAAG+C,IAAI2C,EAAS1F,EAAG8F,IAAI9F,EAAGsD,MACrC,IAAKqC,IAAQC,IAASC,EAAI,MAAM,IAAItM,MAAM,kCAC1C,OAAOoM,EAAM,EAAIC,EAAO,GAAK,CAC/B,CASM,SAAUG,EACd9H,EACA+H,QAMmBrI,IAAfqI,IAA0BC,EAAAA,EAAAA,IAAQD,GACtC,MAAME,OAA6BvI,IAAfqI,EAA2BA,EAAa/H,EAAEnC,SAAS,GAAGjC,OAE1E,MAAO,CAAEmM,WAAYE,EAAaC,YADdC,KAAKC,KAAKH,EAAc,GAE9C,CAkBM,SAAUrC,EACdjB,EACA0D,GAEmC,IADnCC,EAAI7H,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,IAAAA,UAAA,GACJ8H,EAAA9H,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAiC,CAAC,EAElC,GAAIkE,GAAS7H,EAAK,MAAM,IAAIxB,MAAM,0CAA4CqJ,GAC9E,MAAQoD,WAAYS,EAAMN,YAAaO,GAAUX,EAAQnD,EAAO0D,GAChE,GAAII,EAAQ,KAAM,MAAM,IAAInN,MAAM,kDAClC,IAAIoN,EACJ,MAAM5J,EAAuBrC,OAAOkM,OAAO,CACzChE,QACA2D,OACAE,OACAC,QACAG,KAAM7H,EAAQyH,GACdnC,KAAMvJ,EACNuI,IAAKrI,EACL5B,OAASuC,GAAQ+F,EAAI/F,EAAKgH,GAC1B3C,QAAUrE,IACR,GAAmB,kBAARA,EACT,MAAM,IAAIrC,MAAM,sDAAwDqC,GAC1E,OAAOb,GAAOa,GAAOA,EAAMgH,CAAK,EAElCqB,IAAMrI,GAAQA,IAAQb,EACtB+L,MAAQlL,IAASA,EAAMX,KAASA,EAChC6K,IAAMlK,GAAQ+F,GAAK/F,EAAKgH,GACxBG,IAAKA,CAACgE,EAAKC,IAAQD,IAAQC,EAE3BhE,IAAMpH,GAAQ+F,EAAI/F,EAAMA,EAAKgH,GAC7BqE,IAAKA,CAACF,EAAKC,IAAQrF,EAAIoF,EAAMC,EAAKpE,GAClCS,IAAKA,CAAC0D,EAAKC,IAAQrF,EAAIoF,EAAMC,EAAKpE,GAClCO,IAAKA,CAAC4D,EAAKC,IAAQrF,EAAIoF,EAAMC,EAAKpE,GAClCE,IAAKA,CAAClH,EAAKoG,IAAU2C,EAAM5H,EAAGnB,EAAKoG,GACnCkF,IAAKA,CAACH,EAAKC,IAAQrF,EAAIoF,EAAM7E,EAAO8E,EAAKpE,GAAQA,GAGjDuE,KAAOvL,GAAQA,EAAMA,EACrBwL,KAAMA,CAACL,EAAKC,IAAQD,EAAMC,EAC1BK,KAAMA,CAACN,EAAKC,IAAQD,EAAMC,EAC1BM,KAAMA,CAACP,EAAKC,IAAQD,EAAMC,EAE1BzB,IAAM3J,GAAQsG,EAAOtG,EAAKgH,GAC1B2E,KACEf,EAAMe,MAAI,CACRtJ,IACK0I,IAAOA,EAAQpD,EAAOX,IACpB+D,EAAM5J,EAAGkB,KAEpB/E,QAAU0C,GAAS2K,EAAOpI,EAAgBvC,EAAK8K,GAAS1I,EAAgBpC,EAAK8K,GAC7Ec,UAAY/K,IACV,GAAIA,EAAM5C,SAAW6M,EACnB,MAAM,IAAInN,MAAM,6BAA+BmN,EAAQ,eAAiBjK,EAAM5C,QAChF,OAAO0M,EAAOzI,EAAgBrB,GAASoB,EAAgBpB,EAAM,EAG/DgL,YAAcC,GAAQ5C,EAAc/H,EAAG2K,GAGvCC,KAAMA,CAACxM,EAAGyG,EAAGuC,IAAOA,EAAIvC,EAAIzG,IAE9B,OAAOT,OAAOkM,OAAO7J,EACvB,CA0CM,SAAU6K,EAAoBC,GAClC,GAA0B,kBAAfA,EAAyB,MAAM,IAAItO,MAAM,8BACpD,MAAMuO,EAAYD,EAAW/L,SAAS,GAAGjC,OACzC,OAAOuM,KAAKC,KAAKyB,EAAY,EAC/B,CASM,SAAUC,GAAiBF,GAC/B,MAAMhO,EAAS+N,EAAoBC,GACnC,OAAOhO,EAASuM,KAAKC,KAAKxM,EAAS,EACrC,CCjfA,MAAMkB,GAAMC,OAAO,GACbC,GAAMD,OAAO,GAsBnB,SAASgN,GAAoCC,EAAoB1M,GAC/D,MAAMuK,EAAMvK,EAAK2M,SACjB,OAAOD,EAAYnC,EAAMvK,CAC3B,CAEA,SAAS4M,GAAUC,EAAWC,GAC5B,IAAKzI,OAAOD,cAAcyI,IAAMA,GAAK,GAAKA,EAAIC,EAC5C,MAAM,IAAI9O,MAAM,qCAAuC8O,EAAO,YAAcD,EAChF,CAWA,SAASE,GAAUF,EAAWG,GAC5BJ,GAAUC,EAAGG,GACb,MAEMC,EAAY,GAAKJ,EAGvB,MAAO,CAAEK,QALOrC,KAAKC,KAAKkC,EAAaH,GAAK,EAK1BM,WAJC,IAAMN,EAAI,GAICO,KAFjB3J,EAAQoJ,GAEeI,YAAWI,QAD/B5N,OAAOoN,GAEzB,CAEA,SAASS,GAAY5K,EAAW6K,EAAgBC,GAC9C,MAAM,WAAEL,EAAU,KAAEC,EAAI,UAAEH,EAAS,QAAEI,GAAYG,EACjD,IAAIC,EAAQpJ,OAAO3B,EAAI0K,GACnBM,EAAQhL,GAAK2K,EAQbI,EAAQN,IAEVM,GAASR,EACTS,GAAShO,IAEX,MAAMiO,EAAcJ,EAASJ,EAM7B,MAAO,CAAEO,QAAOE,OALDD,EAAc9C,KAAKgD,IAAIJ,GAAS,EAKvBK,OAJC,IAAVL,EAIiBM,MAHlBN,EAAQ,EAGiBO,OAFxBT,EAAS,IAAM,EAEiBU,QAD/BN,EAElB,CAEA,SAASO,GAAkBC,EAAevF,GACxC,IAAK9H,MAAMwD,QAAQ6J,GAAS,MAAM,IAAInQ,MAAM,kBAC5CmQ,EAAOC,SAAQ,CAAC/E,EAAG7K,KACjB,KAAM6K,aAAaT,GAAI,MAAM,IAAI5K,MAAM,0BAA4BQ,EAAE,GAEzE,CACA,SAAS6P,GAAmBC,EAAgB/J,GAC1C,IAAKzD,MAAMwD,QAAQgK,GAAU,MAAM,IAAItQ,MAAM,6BAC7CsQ,EAAQF,SAAQ,CAACG,EAAG/P,KAClB,IAAK+F,EAAMG,QAAQ6J,GAAI,MAAM,IAAIvQ,MAAM,2BAA6BQ,EAAE,GAE1E,CAKA,MAAMgQ,GAAmB,IAAIhJ,QACvBiJ,GAAmB,IAAIjJ,QAE7B,SAASkJ,GAAKzG,GACZ,OAAOwG,GAAiB/I,IAAIuC,IAAM,CACpC,CA4LM,SAAU0G,GACd/F,EACAgG,EACAT,EACAG,GAQAJ,GAAkBC,EAAQvF,GAC1ByF,GAAmBC,EAASM,GAC5B,MAAMC,EAAUV,EAAO7P,OACjBwQ,EAAUR,EAAQhQ,OACxB,GAAIuQ,IAAYC,EAAS,MAAM,IAAI9Q,MAAM,uDAEzC,MAAMqM,EAAOzB,EAAEG,KACT0E,EF5FF,SAAiB/K,GACrB,IAAIC,EACJ,IAAKA,EAAM,EAAGD,EAAIlD,EAAKkD,IAAMhD,EAAKiD,GAAO,GACzC,OAAOA,CACT,CEwFgBoI,CAAOtL,OAAOoP,IAC5B,IAAI1B,EAAa,EACbM,EAAQ,GAAIN,EAAaM,EAAQ,EAC5BA,EAAQ,EAAGN,EAAaM,EAAQ,EAChCA,EAAQ,IAAGN,EAAa,GACjC,MAAM7B,EAAO7H,EAAQ0J,GACf4B,EAAU,IAAIjO,MAAMuD,OAAOiH,GAAQ,GAAG3B,KAAKU,GAEjD,IAAInH,EAAMmH,EACV,IAAK,IAAI7L,EAFQqM,KAAKmE,OAAOJ,EAAO1D,KAAO,GAAKiC,GAAcA,EAEvC3O,GAAK,EAAGA,GAAK2O,EAAY,CAC9C4B,EAAQpF,KAAKU,GACb,IAAK,IAAI4E,EAAI,EAAGA,EAAIH,EAASG,IAAK,CAChC,MAAMC,EAASZ,EAAQW,GACjBxB,EAAQpJ,OAAQ6K,GAAUzP,OAAOjB,GAAM8M,GAC7CyD,EAAQtB,GAASsB,EAAQtB,GAAO/B,IAAIyC,EAAOc,GAC7C,CACA,IAAIE,EAAO9E,EAEX,IAAK,IAAI4E,EAAIF,EAAQzQ,OAAS,EAAG8Q,EAAO/E,EAAM4E,EAAI,EAAGA,IACnDG,EAAOA,EAAK1D,IAAIqD,EAAQE,IACxBE,EAAOA,EAAKzD,IAAI0D,GAGlB,GADAlM,EAAMA,EAAIwI,IAAIyD,GACJ,IAAN3Q,EAAS,IAAK,IAAIyQ,EAAI,EAAGA,EAAI9B,EAAY8B,IAAK/L,EAAMA,EAAImM,QAC9D,CACA,OAAOnM,CACT,CAmGM,SAAUoM,GACdC,GAyBA,OD7LO5K,EC8KO4K,EAAM9K,GDlLP0E,EAAaU,QAAO,CAACtE,EAAKxB,KACrCwB,EAAIxB,GAAO,WACJwB,IARO,CACd8B,MAAO,SACPiE,KAAM,SACNH,MAAO,gBACPD,KAAM,mBCqLRvG,EACE4K,EACA,CACE7M,EAAG,SACH8M,EAAG,SACHC,GAAI,QACJC,GAAI,SAEN,CACEjF,WAAY,gBACZG,YAAa,kBAIVzL,OAAOkM,OAAO,IAChBb,EAAQ+E,EAAM7M,EAAG6M,EAAM9E,eACvB8E,EACElG,EAAGkG,EAAM9K,GAAG4C,OAErB,CCxWA,SAASsI,GAAmBC,QACRxN,IAAdwN,EAAKC,MAAoB5P,EAAM,OAAQ2P,EAAKC,WAC3BzN,IAAjBwN,EAAKE,SAAuB7P,EAAM,UAAW2P,EAAKE,QACxD,CAmFM,MAAOC,WAAe/R,MAC1Bb,WAAAA,GACEG,MADW6F,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAG,GAEhB,EA6BK,MAAM6M,GAAY,CAEvBC,IAAKF,GAELG,KAAM,CACJC,OAAQA,CAACC,EAAaC,KACpB,MAAQJ,IAAKK,GAAMN,GACnB,GAAII,EAAM,GAAKA,EAAM,IAAK,MAAM,IAAIE,EAAE,yBACtC,GAAkB,EAAdD,EAAK/R,OAAY,MAAM,IAAIgS,EAAE,6BACjC,MAAMC,EAAUF,EAAK/R,OAAS,EACxBqE,EAAMvC,EAAoBmQ,GAChC,GAAK5N,EAAIrE,OAAS,EAAK,IAAa,MAAM,IAAIgS,EAAE,wCAEhD,MAAME,EAASD,EAAU,IAAMnQ,EAAqBuC,EAAIrE,OAAS,EAAK,KAAe,GAErF,OADU8B,EAAoBgQ,GACnBI,EAAS7N,EAAM0N,CAAI,EAGhCI,MAAAA,CAAOL,EAAaC,GAClB,MAAQJ,IAAKK,GAAMN,GACnB,IAAIU,EAAM,EACV,GAAIN,EAAM,GAAKA,EAAM,IAAK,MAAM,IAAIE,EAAE,yBACtC,GAAID,EAAK/R,OAAS,GAAK+R,EAAKK,OAAWN,EAAK,MAAM,IAAIE,EAAE,yBACxD,MAAMK,EAAQN,EAAKK,KAEnB,IAAIpS,EAAS,EACb,MAF0B,IAARqS,GAGb,CAEH,MAAMH,EAAiB,IAARG,EACf,IAAKH,EAAQ,MAAM,IAAIF,EAAE,qDACzB,GAAIE,EAAS,EAAG,MAAM,IAAIF,EAAE,4CAC5B,MAAMM,EAAcP,EAAKQ,SAASH,EAAKA,EAAMF,GAC7C,GAAII,EAAYtS,SAAWkS,EAAQ,MAAM,IAAIF,EAAE,yCAC/C,GAAuB,IAAnBM,EAAY,GAAU,MAAM,IAAIN,EAAE,wCACtC,IAAK,MAAMjK,KAAKuK,EAAatS,EAAUA,GAAU,EAAK+H,EAEtD,GADAqK,GAAOF,EACHlS,EAAS,IAAK,MAAM,IAAIgS,EAAE,yCAChC,MAZahS,EAASqS,EAatB,MAAM5J,EAAIsJ,EAAKQ,SAASH,EAAKA,EAAMpS,GACnC,GAAIyI,EAAEzI,SAAWA,EAAQ,MAAM,IAAIgS,EAAE,kCACrC,MAAO,CAAEvJ,IAAG+J,EAAGT,EAAKQ,SAASH,EAAMpS,GACrC,GAMFyS,KAAM,CACJZ,MAAAA,CAAO9P,GACL,MAAQ4P,IAAKK,GAAMN,GACnB,GAAI3P,EAAMb,GAAK,MAAM,IAAI8Q,EAAE,8CAC3B,IAAIhQ,EAAMF,EAAoBC,GAG9B,GADkC,EAA9BgE,OAAO2M,SAAS1Q,EAAI,GAAI,MAAcA,EAAM,KAAOA,GACtC,EAAbA,EAAIhC,OAAY,MAAM,IAAIgS,EAAE,kDAChC,OAAOhQ,CACT,EACAmQ,MAAAA,CAAOJ,GACL,MAAQJ,IAAKK,GAAMN,GACnB,GAAc,IAAVK,EAAK,GAAkB,MAAM,IAAIC,EAAE,uCACvC,GAAgB,IAAZD,EAAK,MAA2B,IAAVA,EAAK,IAC7B,MAAM,IAAIC,EAAE,uDACd,OAAOhO,EAAgB+N,EACzB,GAEFY,KAAAA,CAAM3Q,GAEJ,MAAQ2P,IAAKK,EAAGS,KAAMG,EAAKhB,KAAMiB,GAAQnB,GACnCK,EAAOxN,EAAY,YAAavC,IAC9ByG,EAAGqK,EAAUN,EAAGO,GAAiBF,EAAIV,OAAO,GAAMJ,GAC1D,GAAIgB,EAAa/S,OAAQ,MAAM,IAAIgS,EAAE,+CACrC,MAAQvJ,EAAGuK,EAAQR,EAAGS,GAAeJ,EAAIV,OAAO,EAAMW,IAC9CrK,EAAGyK,EAAQV,EAAGW,GAAeN,EAAIV,OAAO,EAAMc,GACtD,GAAIE,EAAWnT,OAAQ,MAAM,IAAIgS,EAAE,+CACnC,MAAO,CAAErJ,EAAGiK,EAAIT,OAAOa,GAAS/C,EAAG2C,EAAIT,OAAOe,GAChD,EACAE,UAAAA,CAAWC,GACT,MAAQzB,KAAMiB,EAAKJ,KAAMG,GAAQlB,GAG3B4B,EAFKT,EAAIhB,OAAO,EAAMe,EAAIf,OAAOwB,EAAI1K,IAChCkK,EAAIhB,OAAO,EAAMe,EAAIf,OAAOwB,EAAIpD,IAE3C,OAAO4C,EAAIhB,OAAO,GAAMyB,EAC1B,GAGF,SAASC,GAAcxR,EAAayR,GAClC,OAAO7Q,EAAWwB,EAAgBpC,EAAKyR,GACzC,CAIA,MAAMtS,GAAMC,OAAO,GAAIC,GAAMD,OAAO,GAAqBuG,IAAXvG,OAAO,GAAUA,OAAO,IAAIwG,GAAMxG,OAAO,GAEjF,SAAUsS,GAAqBnC,GACnC,MAAMoC,EAzKR,SAA8BzC,GAC5B,MAAMK,EAAON,GAAcC,GAC3B5K,EACEiL,EACA,CACEhQ,EAAG,QACHyG,EAAG,SAEL,CACE4L,mBAAoB,UACpBC,yBAA0B,QAC1BC,cAAe,WACflG,UAAW,WACXmG,cAAe,WACfzU,QAAS,WACT0U,eAAgB,YAGpB,MAAM,KAAEC,EAAI,GAAE7N,EAAE,EAAE7E,GAAMgQ,EACxB,GAAI0C,EAAM,CACR,IAAK7N,EAAG+C,IAAI5H,EAAG6E,EAAGsE,MAChB,MAAM,IAAI/K,MAAM,mCAElB,GACkB,kBAATsU,GACc,kBAAdA,EAAKC,MACgB,oBAArBD,EAAKE,YAEZ,MAAM,IAAIxU,MAAM,oEAEpB,CACA,OAAOmB,OAAOkM,OAAO,IAAKuE,GAC5B,CAyIgB6C,CAAkB7C,IAC1B,GAAEnL,GAAOuN,EACTU,EAAKpK,EAAM0J,EAAMtP,EAAGsP,EAAMvH,YAE1B9M,EACJqU,EAAMrU,SAAO,EACXgV,EAAwBC,EAAyBC,KACjD,MAAMjT,EAAIgT,EAAME,WAChB,OAAO7P,EAAY7E,WAAWsC,KAAK,CAAC,IAAQ+D,EAAG9G,QAAQiC,EAAE4G,GAAI/B,EAAG9G,QAAQiC,EAAEiH,GAC3E,GACGoF,EACJ+F,EAAM/F,WAAS,CACb/K,IAEA,MAAM6R,EAAO7R,EAAM2P,SAAS,GAI5B,MAAO,CAAErK,EAFC/B,EAAGwH,UAAU8G,EAAKlC,SAAS,EAAGpM,EAAG0G,QAE/BtE,EADFpC,EAAGwH,UAAU8G,EAAKlC,SAASpM,EAAG0G,MAAO,EAAI1G,EAAG0G,QAEvD,GAMH,SAAS6H,EAAoBxM,GAC3B,MAAM,EAAE5G,EAAC,EAAEyG,GAAM2L,EACXiB,EAAKxO,EAAGgD,IAAIjB,GACZ0M,EAAKzO,EAAGmD,IAAIqL,EAAIzM,GACtB,OAAO/B,EAAGiH,IAAIjH,EAAGiH,IAAIwH,EAAIzO,EAAGmD,IAAIpB,EAAG5G,IAAKyG,EAC1C,CAEA,SAAS8M,EAAU3M,EAAMK,GACvB,MAAMuM,EAAO3O,EAAGgD,IAAIZ,GACdwM,EAAQL,EAAoBxM,GAClC,OAAO/B,EAAG+C,IAAI4L,EAAMC,EACtB,CAIA,IAAKF,EAAUnB,EAAMvC,GAAIuC,EAAMtC,IAAK,MAAM,IAAI1R,MAAM,qCAIpD,MAAMsV,EAAO7O,EAAGmD,IAAInD,EAAG8C,IAAIyK,EAAMpS,EAAGoG,IAAMC,IACpCsN,EAAQ9O,EAAGmD,IAAInD,EAAGgD,IAAIuK,EAAM3L,GAAI5G,OAAO,KAC7C,GAAIgF,EAAGiE,IAAIjE,EAAGiH,IAAI4H,EAAMC,IAAS,MAAM,IAAIvV,MAAM,4BAQjD,SAASwV,EAAuB9V,GAC9B,MAAQwU,yBAA0BuB,EAAO,YAAE7I,EAAW,eAAEyH,EAAgB3P,EAAGgR,GAAM1B,EACjF,GAAIyB,GAA0B,kBAAR/V,EAAkB,CAGtC,GAFIiC,EAAQjC,KAAMA,EAAMuD,EAAWvD,IAEhB,kBAARA,IAAqB+V,EAAQE,SAASjW,EAAIY,QACnD,MAAM,IAAIN,MAAM,uBAClBN,EAAMA,EAAIsD,SAAuB,EAAd4J,EAAiB,IACtC,CACA,IAAIvK,EACJ,IACEA,EACiB,kBAAR3C,EACHA,EACA4E,EAAgBO,EAAY,cAAenF,EAAKkN,GACxD,CAAE,MAAOgJ,GACP,MAAM,IAAI5V,MACR,wCAA0C4M,EAAc,sBAAwBlN,EAEpF,CAGA,OAFI2U,IAAgBhS,EAAM+F,EAAI/F,EAAKqT,IACnClQ,EAAS,cAAenD,EAAKX,GAAKgU,GAC3BrT,CACT,CAEA,SAASwT,EAAUC,GACjB,KAAMA,aAAiBC,GAAQ,MAAM,IAAI/V,MAAM,2BACjD,CAOA,MAAMgW,EAAe3O,GAAS,CAACgE,EAAU4K,KACvC,MAAQC,GAAI1N,EAAG2N,GAAItN,EAAGuN,GAAIC,GAAMhL,EAEhC,GAAI5E,EAAG+C,IAAI6M,EAAG5P,EAAGsD,KAAM,MAAO,CAAEvB,IAAGK,KACnC,MAAM6B,EAAMW,EAAEX,MAGJ,MAANuL,IAAYA,EAAKvL,EAAMjE,EAAGsD,IAAMtD,EAAGuF,IAAIqK,IAC3C,MAAMC,EAAK7P,EAAGmD,IAAIpB,EAAGyN,GACfM,EAAK9P,EAAGmD,IAAIf,EAAGoN,GACfO,EAAK/P,EAAGmD,IAAIyM,EAAGJ,GACrB,GAAIvL,EAAK,MAAO,CAAElC,EAAG/B,EAAGsE,KAAMlC,EAAGpC,EAAGsE,MACpC,IAAKtE,EAAG+C,IAAIgN,EAAI/P,EAAGsD,KAAM,MAAM,IAAI/J,MAAM,oBACzC,MAAO,CAAEwI,EAAG8N,EAAIzN,EAAG0N,EAAI,IAInBE,EAAkBpP,GAAUgE,IAChC,GAAIA,EAAEX,MAAO,CAIX,GAAIsJ,EAAMC,qBAAuBxN,EAAGiE,IAAIW,EAAE8K,IAAK,OAC/C,MAAM,IAAInW,MAAM,kBAClB,CAEA,MAAM,EAAEwI,EAAC,EAAEK,GAAMwC,EAAEyJ,WAEnB,IAAKrO,EAAGC,QAAQ8B,KAAO/B,EAAGC,QAAQmC,GAAI,MAAM,IAAI7I,MAAM,4BACtD,IAAKmV,EAAU3M,EAAGK,GAAI,MAAM,IAAI7I,MAAM,qCACtC,IAAKqL,EAAE+I,gBAAiB,MAAM,IAAIpU,MAAM,0CACxC,OAAO,CAAI,IAQb,MAAM+V,EASJ5W,WAAAA,CAAY+W,EAAOC,EAAOC,GACxB,GAAU,MAANF,IAAezP,EAAGC,QAAQwP,GAAK,MAAM,IAAIlW,MAAM,cACnD,GAAU,MAANmW,IAAe1P,EAAGC,QAAQyP,IAAO1P,EAAGiE,IAAIyL,GAAK,MAAM,IAAInW,MAAM,cACjE,GAAU,MAANoW,IAAe3P,EAAGC,QAAQ0P,GAAK,MAAM,IAAIpW,MAAM,cACnDJ,KAAKsW,GAAKA,EACVtW,KAAKuW,GAAKA,EACVvW,KAAKwW,GAAKA,EACVjV,OAAOkM,OAAOzN,KAChB,CAIA,iBAAO8W,CAAWrL,GAChB,MAAM,EAAE7C,EAAC,EAAEK,GAAMwC,GAAK,CAAC,EACvB,IAAKA,IAAM5E,EAAGC,QAAQ8B,KAAO/B,EAAGC,QAAQmC,GAAI,MAAM,IAAI7I,MAAM,wBAC5D,GAAIqL,aAAa0K,EAAO,MAAM,IAAI/V,MAAM,gCACxC,MAAM0K,EAAOlK,GAASiG,EAAG+C,IAAIhJ,EAAGiG,EAAGsE,MAEnC,OAAIL,EAAIlC,IAAMkC,EAAI7B,GAAWkN,EAAMhL,KAC5B,IAAIgL,EAAMvN,EAAGK,EAAGpC,EAAGsD,IAC5B,CAEA,KAAIvB,GACF,OAAO5I,KAAKkV,WAAWtM,CACzB,CACA,KAAIK,GACF,OAAOjJ,KAAKkV,WAAWjM,CACzB,CAQA,iBAAO8N,CAAWxG,GAChB,MAAMyG,EAAQrL,EACZ9E,EACA0J,EAAO5I,KAAK8D,GAAMA,EAAE+K,MAEtB,OAAOjG,EAAO5I,KAAI,CAAC8D,EAAG7K,IAAM6K,EAAEyJ,SAAS8B,EAAMpW,MAAK+G,IAAIwO,EAAMW,WAC9D,CAMA,cAAO9T,CAAQN,GACb,MAAM2H,EAAI8L,EAAMW,WAAWzI,EAAUpJ,EAAY,WAAYvC,KAE7D,OADA2H,EAAE4M,iBACK5M,CACT,CAGA,qBAAO6M,CAAeC,GACpB,OAAOhB,EAAMiB,KAAKC,SAASzB,EAAuBuB,GACpD,CAGA,UAAOG,CAAI/G,EAAiBG,GAC1B,OAAOK,GAAUoF,EAAOrB,EAAIvE,EAAQG,EACtC,CAGA6G,cAAAA,CAAehI,GACbiI,EAAKC,cAAczX,KAAMuP,EAC3B,CAGA0H,cAAAA,GACEJ,EAAgB7W,KAClB,CAEA0X,QAAAA,GACE,MAAM,EAAEzO,GAAMjJ,KAAKkV,WACnB,GAAIrO,EAAG8G,MAAO,OAAQ9G,EAAG8G,MAAM1E,GAC/B,MAAM,IAAI7I,MAAM,8BAClB,CAKAuX,MAAAA,CAAOzB,GACLD,EAAUC,GACV,MAAQI,GAAIsB,EAAIrB,GAAIsB,EAAIrB,GAAIsB,GAAO9X,MAC3BsW,GAAIyB,EAAIxB,GAAIyB,EAAIxB,GAAIyB,GAAO/B,EAC7BgC,EAAKrR,EAAG+C,IAAI/C,EAAGmD,IAAI4N,EAAIK,GAAKpR,EAAGmD,IAAI+N,EAAID,IACvCK,EAAKtR,EAAG+C,IAAI/C,EAAGmD,IAAI6N,EAAII,GAAKpR,EAAGmD,IAAIgO,EAAIF,IAC7C,OAAOI,GAAMC,CACf,CAKApJ,MAAAA,GACE,OAAO,IAAIoH,EAAMnW,KAAKsW,GAAIzP,EAAG8F,IAAI3M,KAAKuW,IAAKvW,KAAKwW,GAClD,CAMA/E,MAAAA,GACE,MAAM,EAAEzP,EAAC,EAAEyG,GAAM2L,EACXgE,EAAKvR,EAAGmD,IAAIvB,EAAGL,KACbkO,GAAIsB,EAAIrB,GAAIsB,EAAIrB,GAAIsB,GAAO9X,KACnC,IAAIqY,EAAKxR,EAAGsE,KAAMmN,EAAKzR,EAAGsE,KAAMoN,EAAK1R,EAAGsE,KACpCqN,EAAK3R,EAAGmD,IAAI4N,EAAIA,GAChBa,EAAK5R,EAAGmD,IAAI6N,EAAIA,GAChBa,EAAK7R,EAAGmD,IAAI8N,EAAIA,GAChBa,EAAK9R,EAAGmD,IAAI4N,EAAIC,GA4BpB,OA3BAc,EAAK9R,EAAGiH,IAAI6K,EAAIA,GAChBJ,EAAK1R,EAAGmD,IAAI4N,EAAIE,GAChBS,EAAK1R,EAAGiH,IAAIyK,EAAIA,GAChBF,EAAKxR,EAAGmD,IAAIhI,EAAGuW,GACfD,EAAKzR,EAAGmD,IAAIoO,EAAIM,GAChBJ,EAAKzR,EAAGiH,IAAIuK,EAAIC,GAChBD,EAAKxR,EAAGqD,IAAIuO,EAAIH,GAChBA,EAAKzR,EAAGiH,IAAI2K,EAAIH,GAChBA,EAAKzR,EAAGmD,IAAIqO,EAAIC,GAChBD,EAAKxR,EAAGmD,IAAI2O,EAAIN,GAChBE,EAAK1R,EAAGmD,IAAIoO,EAAIG,GAChBG,EAAK7R,EAAGmD,IAAIhI,EAAG0W,GACfC,EAAK9R,EAAGqD,IAAIsO,EAAIE,GAChBC,EAAK9R,EAAGmD,IAAIhI,EAAG2W,GACfA,EAAK9R,EAAGiH,IAAI6K,EAAIJ,GAChBA,EAAK1R,EAAGiH,IAAI0K,EAAIA,GAChBA,EAAK3R,EAAGiH,IAAIyK,EAAIC,GAChBA,EAAK3R,EAAGiH,IAAI0K,EAAIE,GAChBF,EAAK3R,EAAGmD,IAAIwO,EAAIG,GAChBL,EAAKzR,EAAGiH,IAAIwK,EAAIE,GAChBE,EAAK7R,EAAGmD,IAAI6N,EAAIC,GAChBY,EAAK7R,EAAGiH,IAAI4K,EAAIA,GAChBF,EAAK3R,EAAGmD,IAAI0O,EAAIC,GAChBN,EAAKxR,EAAGqD,IAAImO,EAAIG,GAChBD,EAAK1R,EAAGmD,IAAI0O,EAAID,GAChBF,EAAK1R,EAAGiH,IAAIyK,EAAIA,GAChBA,EAAK1R,EAAGiH,IAAIyK,EAAIA,GACT,IAAIpC,EAAMkC,EAAIC,EAAIC,EAC3B,CAMAzK,GAAAA,CAAIoI,GACFD,EAAUC,GACV,MAAQI,GAAIsB,EAAIrB,GAAIsB,EAAIrB,GAAIsB,GAAO9X,MAC3BsW,GAAIyB,EAAIxB,GAAIyB,EAAIxB,GAAIyB,GAAO/B,EACnC,IAAImC,EAAKxR,EAAGsE,KAAMmN,EAAKzR,EAAGsE,KAAMoN,EAAK1R,EAAGsE,KACxC,MAAMnJ,EAAIoS,EAAMpS,EACVoW,EAAKvR,EAAGmD,IAAIoK,EAAM3L,EAAGL,IAC3B,IAAIoQ,EAAK3R,EAAGmD,IAAI4N,EAAIG,GAChBU,EAAK5R,EAAGmD,IAAI6N,EAAIG,GAChBU,EAAK7R,EAAGmD,IAAI8N,EAAIG,GAChBU,EAAK9R,EAAGiH,IAAI8J,EAAIC,GAChBe,EAAK/R,EAAGiH,IAAIiK,EAAIC,GACpBW,EAAK9R,EAAGmD,IAAI2O,EAAIC,GAChBA,EAAK/R,EAAGiH,IAAI0K,EAAIC,GAChBE,EAAK9R,EAAGqD,IAAIyO,EAAIC,GAChBA,EAAK/R,EAAGiH,IAAI8J,EAAIE,GAChB,IAAIe,EAAKhS,EAAGiH,IAAIiK,EAAIE,GA+BpB,OA9BAW,EAAK/R,EAAGmD,IAAI4O,EAAIC,GAChBA,EAAKhS,EAAGiH,IAAI0K,EAAIE,GAChBE,EAAK/R,EAAGqD,IAAI0O,EAAIC,GAChBA,EAAKhS,EAAGiH,IAAI+J,EAAIC,GAChBO,EAAKxR,EAAGiH,IAAIkK,EAAIC,GAChBY,EAAKhS,EAAGmD,IAAI6O,EAAIR,GAChBA,EAAKxR,EAAGiH,IAAI2K,EAAIC,GAChBG,EAAKhS,EAAGqD,IAAI2O,EAAIR,GAChBE,EAAK1R,EAAGmD,IAAIhI,EAAG4W,GACfP,EAAKxR,EAAGmD,IAAIoO,EAAIM,GAChBH,EAAK1R,EAAGiH,IAAIuK,EAAIE,GAChBF,EAAKxR,EAAGqD,IAAIuO,EAAIF,GAChBA,EAAK1R,EAAGiH,IAAI2K,EAAIF,GAChBD,EAAKzR,EAAGmD,IAAIqO,EAAIE,GAChBE,EAAK5R,EAAGiH,IAAI0K,EAAIA,GAChBC,EAAK5R,EAAGiH,IAAI2K,EAAID,GAChBE,EAAK7R,EAAGmD,IAAIhI,EAAG0W,GACfE,EAAK/R,EAAGmD,IAAIoO,EAAIQ,GAChBH,EAAK5R,EAAGiH,IAAI2K,EAAIC,GAChBA,EAAK7R,EAAGqD,IAAIsO,EAAIE,GAChBA,EAAK7R,EAAGmD,IAAIhI,EAAG0W,GACfE,EAAK/R,EAAGiH,IAAI8K,EAAIF,GAChBF,EAAK3R,EAAGmD,IAAIyO,EAAIG,GAChBN,EAAKzR,EAAGiH,IAAIwK,EAAIE,GAChBA,EAAK3R,EAAGmD,IAAI6O,EAAID,GAChBP,EAAKxR,EAAGmD,IAAI2O,EAAIN,GAChBA,EAAKxR,EAAGqD,IAAImO,EAAIG,GAChBA,EAAK3R,EAAGmD,IAAI2O,EAAIF,GAChBF,EAAK1R,EAAGmD,IAAI6O,EAAIN,GAChBA,EAAK1R,EAAGiH,IAAIyK,EAAIC,GACT,IAAIrC,EAAMkC,EAAIC,EAAIC,EAC3B,CAEAO,QAAAA,CAAS5C,GACP,OAAOlW,KAAK8N,IAAIoI,EAAMnH,SACxB,CAEAjE,GAAAA,GACE,OAAO9K,KAAK2X,OAAOxB,EAAMhL,KAC3B,CAEQ4N,IAAAA,CAAKjU,GACX,OAAO0S,EAAKwB,WAAWhZ,KAAM8E,EAAGqR,EAAMY,WACxC,CAOAkC,cAAAA,CAAeC,GACb,MAAM,KAAExE,EAAM5P,EAAGgR,GAAM1B,EACvBxO,EAAS,SAAUsT,EAAItX,GAAKkU,GAC5B,MAAMqD,EAAIhD,EAAMhL,KAChB,GAAI+N,IAAOtX,GAAK,OAAOuX,EACvB,GAAInZ,KAAK8K,OAASoO,IAAOpX,GAAK,OAAO9B,KAGrC,IAAK0U,GAAQ8C,EAAK4B,eAAepZ,MAC/B,OAAOwX,EAAK6B,iBAAiBrZ,KAAMkZ,EAAI/C,EAAMY,YAI/C,IAAI,MAAEuC,EAAK,GAAEC,EAAE,MAAEC,EAAK,GAAEC,GAAO/E,EAAKE,YAAYsE,GAC5CQ,EAAMP,EACNQ,EAAMR,EACNzN,EAAW1L,KACf,KAAOuZ,EAAK3X,IAAO6X,EAAK7X,IAClB2X,EAAKzX,KAAK4X,EAAMA,EAAI5L,IAAIpC,IACxB+N,EAAK3X,KAAK6X,EAAMA,EAAI7L,IAAIpC,IAC5BA,EAAIA,EAAE+F,SACN8H,IAAOzX,GACP2X,IAAO3X,GAKT,OAHIwX,IAAOI,EAAMA,EAAI3K,UACjByK,IAAOG,EAAMA,EAAI5K,UACrB4K,EAAM,IAAIxD,EAAMtP,EAAGmD,IAAI2P,EAAIrD,GAAI5B,EAAKC,MAAOgF,EAAIpD,GAAIoD,EAAInD,IAChDkD,EAAI5L,IAAI6L,EACjB,CAWAtC,QAAAA,CAAS/F,GACP,MAAM,KAAEoD,EAAM5P,EAAGgR,GAAM1B,EAEvB,IAAIY,EAAc4E,EAElB,GAHAhU,EAAS,SAAU0L,EAAQxP,GAAKgU,GAG5BpB,EAAM,CACR,MAAM,MAAE4E,EAAK,GAAEC,EAAE,MAAEC,EAAK,GAAEC,GAAO/E,EAAKE,YAAYtD,GAClD,IAAM7F,EAAGiO,EAAK9V,EAAGiW,GAAQ7Z,KAAK+Y,KAAKQ,IAC7B9N,EAAGkO,EAAK/V,EAAGkW,GAAQ9Z,KAAK+Y,KAAKU,GACnCC,EAAMlC,EAAK3I,gBAAgByK,EAAOI,GAClCC,EAAMnC,EAAK3I,gBAAgB2K,EAAOG,GAClCA,EAAM,IAAIxD,EAAMtP,EAAGmD,IAAI2P,EAAIrD,GAAI5B,EAAKC,MAAOgF,EAAIpD,GAAIoD,EAAInD,IACvDxB,EAAQ0E,EAAI5L,IAAI6L,GAChBC,EAAOC,EAAI/L,IAAIgM,EACjB,KAAO,CACL,MAAM,EAAErO,EAAC,EAAE7H,GAAM5D,KAAK+Y,KAAKzH,GAC3B0D,EAAQvJ,EACRmO,EAAOhW,CACT,CAEA,OAAOuS,EAAMY,WAAW,CAAC/B,EAAO4E,IAAO,EACzC,CAQAG,oBAAAA,CAAqBzP,EAAUtI,EAAWyG,GACxC,MAAMuR,EAAI7D,EAAMiB,KACVpN,EAAMA,CACVK,EACArI,IACIA,IAAMJ,IAAOI,IAAMF,IAAQuI,EAAEsN,OAAOqC,GAA2B3P,EAAEgN,SAASrV,GAAjCqI,EAAE4O,eAAejX,GAC1DsD,EAAM0E,EAAIhK,KAAMgC,GAAG8L,IAAI9D,EAAIM,EAAG7B,IACpC,OAAOnD,EAAIwF,WAAQtG,EAAYc,CACjC,CAKA4P,QAAAA,CAASmB,GACP,OAAOD,EAAapW,KAAMqW,EAC5B,CACA7B,aAAAA,GACE,MAAQ5C,EAAGqI,EAAQ,cAAEzF,GAAkBJ,EACvC,GAAI6F,IAAanY,GAAK,OAAO,EAC7B,GAAI0S,EAAe,OAAOA,EAAc2B,EAAOnW,MAC/C,MAAM,IAAII,MAAM,+DAClB,CACAmU,aAAAA,GACE,MAAQ3C,EAAGqI,EAAQ,cAAE1F,GAAkBH,EACvC,OAAI6F,IAAanY,GAAY9B,KACzBuU,EAAsBA,EAAc4B,EAAOnW,MACxCA,KAAKiZ,eAAe7E,EAAMxC,EACnC,CAEAsI,UAAAA,GAA8B,IAAnBC,IAAY5U,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,KAAAA,UAAA,GAGrB,OAFAlD,EAAM,eAAgB8X,GACtBna,KAAKiX,iBACElX,EAAQoW,EAAOnW,KAAMma,EAC9B,CAEApX,KAAAA,GAAyB,IAAnBoX,IAAY5U,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,KAAAA,UAAA,GAEhB,OADAlD,EAAM,eAAgB8X,GACf9W,EAAWrD,KAAKka,WAAWC,GACpC,EArUgBhE,EAAAiB,KAAO,IAAIjB,EAAM/B,EAAMvC,GAAIuC,EAAMtC,GAAIjL,EAAGsD,KAExCgM,EAAAhL,KAAO,IAAIgL,EAAMtP,EAAGsE,KAAMtE,EAAGsD,IAAKtD,EAAGsE,MAqUvD,MAAM,KAAEuJ,EAAI,WAAE7H,GAAeuH,EACvBoD,GDpoBiCxM,ECooBrBmL,EDpoB6CjH,ECooBtCwF,EAAOzH,KAAKC,KAAKL,EAAa,GAAKA,EDnoBrD,CACLgC,mBAEAuK,eAAegB,GACQ,IAAdtJ,GAAKsJ,GAIdC,YAAAA,CAAaD,EAAQtV,GAAqB,IAAV2G,EAAClG,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAGyF,EAAEG,KAChCO,EAAO0O,EACX,KAAOtV,EAAIlD,IACLkD,EAAIhD,KAAK2J,EAAIA,EAAEqC,IAAIpC,IACvBA,EAAIA,EAAE+F,SACN3M,IAAMhD,GAER,OAAO2J,CACT,EAcA6O,gBAAAA,CAAiBF,EAAQnL,GACvB,MAAM,QAAEK,EAAO,WAAEC,GAAeJ,GAAUF,EAAGC,GACvCqB,EAAc,GACpB,IAAI9E,EAAO2O,EACPG,EAAO9O,EACX,IAAK,IAAIkE,EAAS,EAAGA,EAASL,EAASK,IAAU,CAC/C4K,EAAO9O,EACP8E,EAAOiK,KAAKD,GAEZ,IAAK,IAAI3Z,EAAI,EAAGA,EAAI2O,EAAY3O,IAC9B2Z,EAAOA,EAAKzM,IAAIrC,GAChB8E,EAAOiK,KAAKD,GAEd9O,EAAI8O,EAAK9I,QACX,CACA,OAAOlB,CACT,EASAwI,IAAAA,CAAK9J,EAAWwL,EAAkB3V,GAOhC,IAAI2G,EAAIT,EAAEG,KACNvH,EAAIoH,EAAEoM,KAMV,MAAMsD,EAAKvL,GAAUF,EAAGC,GACxB,IAAK,IAAIS,EAAS,EAAGA,EAAS+K,EAAGpL,QAASK,IAAU,CAElD,MAAM,MAAEG,EAAK,OAAEE,EAAM,OAAEE,EAAM,MAAEC,EAAK,OAAEC,EAAM,QAAEC,GAAYX,GAAY5K,EAAG6K,EAAQ+K,GACjF5V,EAAIgL,EACAI,EAGFtM,EAAIA,EAAEkK,IAAIe,GAAgBuB,EAAQqK,EAAYpK,KAG9C5E,EAAIA,EAAEqC,IAAIe,GAAgBsB,EAAOsK,EAAYzK,IAEjD,CAIA,MAAO,CAAEvE,IAAG7H,IACd,EAUA+W,UAAAA,CAAW1L,EAAWwL,EAAkB3V,GAA0B,IAAfoH,EAAA3G,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAASyF,EAAEG,KAC5D,MAAMuP,EAAKvL,GAAUF,EAAGC,GACxB,IAAK,IAAIS,EAAS,EAAGA,EAAS+K,EAAGpL,SAC3BxK,IAAMlD,GAD8B+N,IAAU,CAElD,MAAM,MAAEG,EAAK,OAAEE,EAAM,OAAEE,EAAM,MAAEC,GAAUT,GAAY5K,EAAG6K,EAAQ+K,GAEhE,GADA5V,EAAIgL,GACAI,EAIG,CACL,MAAM9N,EAAOqY,EAAYzK,GACzB9D,EAAMA,EAAI4B,IAAIqC,EAAQ/N,EAAK2M,SAAW3M,EACxC,CACF,CACA,OAAO8J,CACT,EAEA0O,cAAAA,CAAe3L,EAAW5E,EAAMwQ,GAE9B,IAAIC,EAAOlK,GAAiB9I,IAAIuC,GAKhC,OAJKyQ,IACHA,EAAO9a,KAAKsa,iBAAiBjQ,EAAG4E,GACtB,IAANA,GAAS2B,GAAiBnQ,IAAI4J,EAAGwQ,EAAUC,KAE1CA,CACT,EAEA9B,UAAAA,CAAW3O,EAAMvF,EAAW+V,GAC1B,MAAM5L,EAAI6B,GAAKzG,GACf,OAAOrK,KAAK+Y,KAAK9J,EAAGjP,KAAK4a,eAAe3L,EAAG5E,EAAGwQ,GAAY/V,EAC5D,EAEAuU,gBAAAA,CAAiBhP,EAAMvF,EAAW+V,EAAsBE,GACtD,MAAM9L,EAAI6B,GAAKzG,GACf,OAAU,IAAN4E,EAAgBjP,KAAKqa,aAAahQ,EAAGvF,EAAGiW,GACrC/a,KAAK2a,WAAW1L,EAAGjP,KAAK4a,eAAe3L,EAAG5E,EAAGwQ,GAAY/V,EAAGiW,EACrE,EAMAtD,aAAAA,CAAcpN,EAAM4E,GAClBD,GAAUC,EAAGC,GACb2B,GAAiBpQ,IAAI4J,EAAG4E,GACxB2B,GAAiBoK,OAAO3Q,EAC1B,IAjJE,IAAmCW,EAAwBkE,ECqoB/D,MAAO,CACLkF,QACA6G,gBAAiB9E,EACjBP,yBACAR,sBACA8F,mBA9ZF,SAA4BzY,GAC1B,OAAOgD,EAAQhD,EAAKX,GAAKsS,EAAMtP,EACjC,EA8ZF,CAkFM,SAAUqW,GAAYC,GAC1B,MAAMhH,EA5CR,SACEzC,GAEA,MAAMK,EAAON,GAAcC,GAc3B,OAbA5K,EACEiL,EACA,CACExS,KAAM,OACNkC,KAAM,WACN2Z,YAAa,YAEf,CACEC,SAAU,WACVC,cAAe,WACftJ,KAAM,YAGH1Q,OAAOkM,OAAO,CAAEwE,MAAM,KAASD,GACxC,CA0BgBwJ,CAAaJ,IACrB,GAAEvU,EAAI/B,EAAG2W,EAAW,YAAEzO,EAAW,WAAEH,GAAeuH,EAClDsH,EAAgB7U,EAAG0G,MAAQ,EAC3BoO,EAAkB,EAAI9U,EAAG0G,MAAQ,EAEvC,SAASqO,EAAK5Z,GACZ,OAAOwG,EAAIxG,EAAGyZ,EAChB,CACA,SAASI,EAAK7Z,GACZ,OAAO+G,EAAO/G,EAAGyZ,EACnB,CAEA,MACER,gBAAiB9E,EAAK,uBACtBP,EAAsB,oBACtBR,EAAmB,mBACnB8F,GACE/G,GAAkB,IACjBC,EACHrU,OAAAA,CAAQgV,EAAIC,EAAOmF,GACjB,MAAMnY,EAAIgT,EAAME,WACVtM,EAAI/B,EAAG9G,QAAQiC,EAAE4G,GACjBkT,EAAMzW,EAEZ,OADAhD,EAAM,eAAgB8X,GAClBA,EACK2B,EAAItb,WAAWsC,KAAK,CAACkS,EAAM0C,WAAa,EAAO,IAAQ9O,GAEvDkT,EAAItb,WAAWsC,KAAK,CAAC,IAAQ8F,EAAG/B,EAAG9G,QAAQiC,EAAEiH,GAExD,EACAoF,SAAAA,CAAU/K,GACR,MAAMyB,EAAMzB,EAAM5C,OACZqb,EAAOzY,EAAM,GACb6R,EAAO7R,EAAM2P,SAAS,GAE5B,GAAIlO,IAAQ2W,GAA2B,IAATK,GAA0B,IAATA,EAgBxC,IAAIhX,IAAQ4W,GAA4B,IAATI,EAAe,CAGnD,MAAO,CAAEnT,EAFC/B,EAAGwH,UAAU8G,EAAKlC,SAAS,EAAGpM,EAAG0G,QAE/BtE,EADFpC,EAAGwH,UAAU8G,EAAKlC,SAASpM,EAAG0G,MAAO,EAAI1G,EAAG0G,QAExD,CAGE,MAAM,IAAInN,MACR,qCAHSsb,EAGmC,qBAFnCC,EAE+D,SAAW5W,EAEvF,CA1B+D,CAC7D,MAAM6D,EAAIlE,EAAgByQ,GAC1B,IAAK1P,EAAQmD,EAAG9G,GAAK+E,EAAG4C,OAAQ,MAAM,IAAIrJ,MAAM,yBAChD,MAAM4b,EAAK5G,EAAoBxM,GAC/B,IAAIK,EACJ,IACEA,EAAIpC,EAAGuH,KAAK4N,EACd,CAAE,MAAOC,GACP,MAAMC,EAASD,aAAqB7b,MAAQ,KAAO6b,EAAUta,QAAU,GACvE,MAAM,IAAIvB,MAAM,wBAA0B8b,EAC5C,CAKA,OAFiC,KAAP,EAAPH,OAFH9S,EAAInH,MAASA,MAGHmH,EAAIpC,EAAG8F,IAAI1D,IAC9B,CAAEL,IAAGK,IACd,CAWF,IAGF,SAASkT,EAAsBnT,GAE7B,OAAOA,EADMyS,GAAe3Z,EAE9B,CAMA,MAAMsa,EAASA,CAAC3T,EAAe3F,EAAcxB,IAAeoD,EAAgB+D,EAAE4T,MAAMvZ,EAAMxB,IAK1F,MAAMgb,EAIJ/c,WAAAA,CAAY8J,EAAWsH,EAAW4L,GAChC3W,EAAS,IAAKyD,EAAGvH,GAAK2Z,GACtB7V,EAAS,IAAK+K,EAAG7O,GAAK2Z,GACtBzb,KAAKqJ,EAAIA,EACTrJ,KAAK2Q,EAAIA,EACO,MAAZ4L,IAAkBvc,KAAKuc,SAAWA,GACtChb,OAAOkM,OAAOzN,KAChB,CAGA,kBAAOwc,CAAY9Z,GACjB,MAAMwQ,EAAIlG,EAEV,OADAtK,EAAMuC,EAAY,mBAAoBvC,EAAS,EAAJwQ,GACpC,IAAIoJ,EAAUF,EAAO1Z,EAAK,EAAGwQ,GAAIkJ,EAAO1Z,EAAKwQ,EAAG,EAAIA,GAC7D,CAIA,cAAOuJ,CAAQ/Z,GACb,MAAM,EAAE2G,EAAC,EAAEsH,GAAMyB,GAAIiB,MAAMpO,EAAY,MAAOvC,IAC9C,OAAO,IAAI4Z,EAAUjT,EAAGsH,EAC1B,CAMAsG,cAAAA,GAAwB,CAExByF,cAAAA,CAAeH,GACb,OAAO,IAAID,EAAUtc,KAAKqJ,EAAGrJ,KAAK2Q,EAAG4L,EACvC,CAEAI,gBAAAA,CAAiBC,GACf,MAAM,EAAEvT,EAAC,EAAEsH,EAAG4L,SAAUM,GAAQ7c,KAC1B4R,EAAI2J,EAActW,EAAY,UAAW2X,IAC/C,GAAW,MAAPC,IAAgB,CAAC,EAAG,EAAG,EAAG,GAAG9G,SAAS8G,GAAM,MAAM,IAAIzc,MAAM,uBAChE,MAAM0c,EAAe,IAARD,GAAqB,IAARA,EAAYxT,EAAI+K,EAAMtP,EAAIuE,EACpD,GAAIyT,GAAQjW,EAAG4C,MAAO,MAAM,IAAIrJ,MAAM,8BACtC,MAAM2c,EAAuB,KAAP,EAANF,GAAiB,KAAO,KAClC3R,EAAIiL,EAAMnT,QAAQ+Z,EAAS9I,GAAc6I,EAAMjW,EAAG0G,QAClDyP,EAAKnB,EAAKiB,GACVG,EAAKrB,GAAMhK,EAAIoL,GACfE,EAAKtB,EAAKjL,EAAIqM,GACd1S,EAAI6L,EAAMiB,KAAK2C,qBAAqB7O,EAAG+R,EAAIC,GACjD,IAAK5S,EAAG,MAAM,IAAIlK,MAAM,qBAExB,OADAkK,EAAE2M,iBACK3M,CACT,CAGA6S,QAAAA,GACE,OAAOhB,EAAsBnc,KAAK2Q,EACpC,CAEAyM,UAAAA,GACE,OAAOpd,KAAKmd,WAAa,IAAIb,EAAUtc,KAAKqJ,EAAGuS,GAAM5b,KAAK2Q,GAAI3Q,KAAKuc,UAAYvc,IACjF,CAGAqd,aAAAA,GACE,OAAOtZ,EAAW/D,KAAKsd,WACzB,CACAA,QAAAA,GACE,OAAOlL,GAAI0B,WAAW9T,KACxB,CAGAud,iBAAAA,GACE,OAAOxZ,EAAW/D,KAAKwd,eACzB,CACAA,YAAAA,GACE,MAAMtK,EAAIlG,EACV,OAAOiH,GAAcjU,KAAKqJ,EAAG6J,GAAKe,GAAcjU,KAAK2Q,EAAGuC,EAC1D,EAIF,MAAMuK,EAAQ,CACZC,iBAAAA,CAAkBvG,GAChB,IAEE,OADAvB,EAAuBuB,IAChB,CACT,CAAE,MAAOnB,GACP,OAAO,CACT,CACF,EACAJ,uBAAwBA,EAMxB+H,iBAAkBA,KAChB,MAAMjd,EAASkO,GAAiBwF,EAAMtP,GACtC,OFhhBA,SAAyBhF,EAAiB4O,GAAgC,IAAZtB,EAAI7H,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,IAAAA,UAAA,GACtE,MAAMR,EAAMjF,EAAIY,OACVkd,EAAWnP,EAAoBC,GAC/BmP,EAASjP,GAAiBF,GAEhC,GAAI3J,EAAM,IAAMA,EAAM8Y,GAAU9Y,EAAM,KACpC,MAAM,IAAI3E,MAAM,YAAcyd,EAAS,6BAA+B9Y,GACxE,MAEM+Y,EAAUtV,EAFJ4E,EAAOzI,EAAgB7E,GAAO4E,EAAgB5E,GAEjC4O,EAAa5M,GAAOA,EAC7C,OAAOsL,EAAOpI,EAAgB8Y,EAASF,GAAY/Y,EAAgBiZ,EAASF,EAC9E,CEqgBaG,CAAe3J,EAAMiH,YAAY3a,GAAS0T,EAAMtP,EAAE,EAW3DkZ,UAAAA,GAA6C,IAAlCzO,EAAUhK,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAG,EAAGyP,EAAKzP,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAG4Q,EAAMiB,KAGvC,OAFApC,EAAMuC,eAAehI,GACrByF,EAAMqC,SAASxV,OAAO,IACfmT,CACT,GAgBF,SAASiJ,EAAU7b,GACjB,GAAoB,kBAATA,EAAmB,OAAO,EACrC,GAAIA,aAAgB+T,EAAO,OAAO,EAClC,MACMpR,EADME,EAAY,MAAO7C,GACf1B,OACVwd,EAAMrX,EAAG0G,MACT4Q,EAAUD,EAAM,EAChBE,EAAY,EAAIF,EAAM,EAC5B,OAAI9J,EAAME,0BAA4BtH,IAAgBmR,OACpD,EAEOpZ,IAAQoZ,GAAWpZ,IAAQqZ,CAEtC,CAuBA,MAAM9C,EACJlH,EAAMkH,UACN,SAAUhY,GAER,GAAIA,EAAM5C,OAAS,KAAM,MAAM,IAAIN,MAAM,sBAGzC,MAAMqC,EAAMiC,EAAgBpB,GACtB+a,EAAuB,EAAf/a,EAAM5C,OAAamM,EACjC,OAAOwR,EAAQ,EAAI5b,GAAOZ,OAAOwc,GAAS5b,CAC5C,EACI8Y,EACJnH,EAAMmH,eACN,SAAUjY,GACR,OAAOsY,EAAKN,EAAShY,GACvB,EAEIgb,EAAazY,EAAQgH,GAI3B,SAAS0R,EAAW9b,GAGlB,OAFAmD,EAAS,WAAaiH,EAAYpK,EAAKb,GAAK0c,GAErCzZ,EAAgBpC,EAAKuK,EAC9B,CAOA,SAASwR,EAAQ5B,EAAczF,GAA0C,IAArBnF,EAAIzM,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAGkZ,EACzD,GAAI,CAAC,YAAa,aAAaC,MAAMC,GAAMA,KAAK3M,IAC9C,MAAM,IAAI5R,MAAM,uCAClB,MAAM,KAAEZ,EAAI,YAAE6b,GAAgBjH,EAC9B,IAAI,KAAEnC,EAAI,QAAEC,EAAS0M,aAAcC,GAAQ7M,EAC/B,MAARC,IAAcA,GAAO,GACzB2K,EAAU3X,EAAY,UAAW2X,GACjC7K,GAAmBC,GACfE,IAAS0K,EAAU3X,EAAY,oBAAqBzF,EAAKod,KAK7D,MAAMkC,EAAQvD,EAAcqB,GACtBlR,EAAIkK,EAAuBuB,GAC3B4H,EAAW,CAACR,EAAW7S,GAAI6S,EAAWO,IAE5C,GAAW,MAAPD,IAAuB,IAARA,EAAe,CAEhC,MAAMzZ,GAAY,IAARyZ,EAAexD,EAAYxU,EAAG0G,OAASsR,EACjDE,EAASvE,KAAKvV,EAAY,eAAgBG,GAC5C,CACA,MAAM4Z,EAAO3Z,KAAe0Z,GACtBzV,EAAIwV,EAuBV,MAAO,CAAEE,OAAMC,MArBf,SAAeC,GAEb,MAAMP,EAAIrD,EAAS4D,GACnB,IAAKhE,EAAmByD,GAAI,OAC5B,MAAMQ,EAAKtD,EAAK8C,GACVvV,EAAI+M,EAAMiB,KAAKC,SAASsH,GAAGzJ,WAC3B7L,EAAIuS,EAAKxS,EAAER,GACjB,GAAIS,IAAMzH,GAAK,OAIf,MAAM+O,EAAIiL,EAAKuD,EAAKvD,EAAKtS,EAAID,EAAIqC,IACjC,GAAIiF,IAAM/O,GAAK,OACf,IAAI2a,GAAYnT,EAAER,IAAMS,EAAI,EAAI,GAAK5C,OAAO2C,EAAEH,EAAInH,IAC9Csd,EAAQzO,EAKZ,OAJIsB,GAAQkK,EAAsBxL,KAChCyO,EAxPN,SAAoBzO,GAClB,OAAOwL,EAAsBxL,GAAKiL,GAAMjL,GAAKA,CAC/C,CAsPcyM,CAAWzM,GACnB4L,GAAY,GAEP,IAAID,EAAUjT,EAAG+V,EAAO7C,EACjC,EAEF,CACA,MAAMkC,EAA2B,CAAExM,KAAMmC,EAAMnC,KAAMC,SAAS,GACxDmN,EAA0B,CAAEpN,KAAMmC,EAAMnC,KAAMC,SAAS,GAiG7D,OA1EAiE,EAAMiB,KAAKG,eAAe,GA0EnB,CACLnD,QACAkL,aA/NF,SAAsBnI,GAAwC,IAAnBgD,IAAY5U,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,KAAAA,UAAA,GACrD,OAAO4Q,EAAMe,eAAeC,GAAY+C,WAAWC,EACrD,EA8NEoF,gBAhMF,SAAyBC,EAAmBC,GAAiC,IAAnBtF,IAAY5U,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,KAAAA,UAAA,GACpE,IAA4B,IAAxB0Y,EAAUuB,GAAoB,MAAM,IAAIpf,MAAM,iCAClD,IAA2B,IAAvB6d,EAAUwB,GAAoB,MAAM,IAAIrf,MAAM,iCAElD,OADU+V,EAAMnT,QAAQyc,GACfpI,SAASzB,EAAuB4J,IAAWtF,WAAWC,EACjE,EA4LEuF,KAtFF,SAAc9C,EAAc+C,GAAuC,IAArB3N,EAAIzM,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAGkZ,EACnD,MAAM,KAAEO,EAAI,MAAEC,GAAUT,EAAQ5B,EAAS+C,EAAS3N,GAC5C4N,EAAIxL,EACJyL,EHz7BJ,SACJC,EACAC,EACAC,GAEA,GAAuB,kBAAZF,GAAwBA,EAAU,EAAG,MAAM,IAAI1f,MAAM,4BAChE,GAAwB,kBAAb2f,GAAyBA,EAAW,EAAG,MAAM,IAAI3f,MAAM,6BAClE,GAAsB,oBAAX4f,EAAuB,MAAM,IAAI5f,MAAM,6BAElD,IAAI+I,EAAIrD,EAAIga,GACRnB,EAAI7Y,EAAIga,GACRlf,EAAI,EACR,MAAMqf,EAAQA,KACZ9W,EAAE4C,KAAK,GACP4S,EAAE5S,KAAK,GACPnL,EAAI,CAAC,EAEDgR,EAAI,mBAAAsO,EAAA3a,UAAA7E,OAAI+H,EAAe,IAAAvF,MAAAgd,GAAAzgB,EAAA,EAAAA,EAAAygB,EAAAzgB,IAAfgJ,EAAehJ,GAAA8F,UAAA9F,GAAA,OAAKugB,EAAOrB,EAAGxV,KAAMV,EAAE,EAC9C0X,EAAS,WAAkB,IAAjBnB,EAAIzZ,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAGO,EAAI,GAEzB6Y,EAAI/M,EAAE7L,EAAK,CAAC,IAAQiZ,GACpB7V,EAAIyI,IACgB,IAAhBoN,EAAKte,SACTie,EAAI/M,EAAE7L,EAAK,CAAC,IAAQiZ,GACpB7V,EAAIyI,IACN,EACMwO,EAAMA,KAEV,GAAIxf,KAAO,IAAM,MAAM,IAAIR,MAAM,2BACjC,IAAI2E,EAAM,EACV,MAAM7D,EAAoB,GAC1B,KAAO6D,EAAMgb,GAAU,CACrB5W,EAAIyI,IACJ,MAAMyO,EAAKlX,EAAEkT,QACbnb,EAAIsZ,KAAK6F,GACTtb,GAAOoE,EAAEzI,MACX,CACA,OAAO2E,KAAenE,EAAI,EAU5B,MARiBof,CAACtB,EAAkBuB,KAGlC,IAAIpb,EACJ,IAHA8a,IACAE,EAAOnB,KAEE7Z,EAAMob,EAAKH,OAASD,IAE7B,OADAF,IACO9a,CAAG,CAGd,CGy4BiBqb,CAAmCZ,EAAEpgB,KAAKc,UAAWsf,EAAE5S,YAAa4S,EAAEle,MACnF,OAAOme,EAAKb,EAAMC,EACpB,EAkFEwB,OA/DF,SACEC,EACA9D,EACA+D,GACqB,IAAAC,EAAA,IAArB5O,EAAIzM,UAAA7E,OAAA,QAAA8D,IAAAe,UAAA,GAAAA,UAAA,GAAG8Z,EAEP,MAAMwB,EAAKH,EACX9D,EAAU3X,EAAY,UAAW2X,GACjC+D,EAAY1b,EAAY,YAAa0b,GACrC,MAAM,KAAE1O,EAAI,QAAEC,EAAO,OAAE4O,GAAW9O,EAIlC,GADAD,GAAmBC,GACf,WAAYA,EAAM,MAAM,IAAI5R,MAAM,sCACtC,QAAeoE,IAAXsc,GAAmC,YAAXA,GAAmC,QAAXA,EAClD,MAAM,IAAI1gB,MAAM,iCAClB,MAAM2gB,EAAsB,kBAAPF,GAAmB9e,EAAQ8e,GAC1CG,GACHD,IACAD,GACa,kBAAPD,GACA,OAAPA,GACgB,kBAATA,EAAGxX,GACM,kBAATwX,EAAGlQ,EACZ,IAAKoQ,IAAUC,EACb,MAAM,IAAI5gB,MAAM,4EAElB,IAAI6gB,EACA5W,EACJ,IAEE,GADI2W,IAAOC,EAAO,IAAI3E,EAAUuE,EAAGxX,EAAGwX,EAAGlQ,IACrCoQ,EAAO,CAGT,IACiB,YAAXD,IAAsBG,EAAO3E,EAAUG,QAAQoE,GACrD,CAAE,MAAOK,GACP,KAAMA,aAAoB9O,GAAIC,KAAM,MAAM6O,CAC5C,CACKD,GAAmB,QAAXH,IAAkBG,EAAO3E,EAAUE,YAAYqE,GAC9D,CACAxW,EAAI8L,EAAMnT,QAAQ2d,EACpB,CAAE,MAAO3K,GACP,OAAO,CACT,CACA,IAAKiL,EAAM,OAAO,EAClB,GAAIhP,GAAQgP,EAAK9D,WAAY,OAAO,EAChCjL,IAAS0K,EAAUxI,EAAM5U,KAAKod,IAClC,MAAM,EAAEvT,EAAC,EAAEsH,GAAMsQ,EACXrP,EAAI2J,EAAcqB,GAClBuE,EAAKtF,EAAKlL,GACVsM,EAAKrB,EAAKhK,EAAIuP,GACdjE,EAAKtB,EAAKvS,EAAI8X,GACdjW,EAA8C,QAA7C0V,EAAGzK,EAAMiB,KAAK2C,qBAAqB1P,EAAG4S,EAAIC,UAAG,IAAA0D,OAAA,EAA1CA,EAA4C1L,WACtD,QAAKhK,GACK0Q,EAAK1Q,EAAEtC,KACJS,CACf,EAOE4R,gBAAiB9E,EACjBmG,YACAmB,QAEJ,CC7wCM,SAAU2D,GAAQ5hB,GAKtB,MAAO,CACLA,OACAkC,KAAM,SAAC5B,GAAe,QAAAogB,EAAA3a,UAAA7E,OAAK2gB,EAAkB,IAAAne,MAAAgd,EAAA,EAAAA,EAAA,KAAAzgB,EAAA,EAAAA,EAAAygB,EAAAzgB,IAAlB4hB,EAAkB5hB,EAAA,GAAA8F,UAAA9F,GAAA,OAAKiC,EAAAA,EAAAA,GAAKlC,EAAMM,GAAKuF,EAAAA,EAAAA,OAAegc,GAAM,EACvFhG,YAAWA,EAAAA,GAEf,CCQA,MAAMiG,GAAazf,OAAO,sEACpB0f,GAAa1f,OAAO,sEACpBD,GAAMC,OAAO,GACbC,GAAMD,OAAO,GACbsG,GAAMtG,OAAO,GACb2f,GAAaA,CAACxf,EAAWyG,KAAezG,EAAIyG,EAAIN,IAAOM,EAM7D,SAASgZ,GAAQxY,GACf,MAAMoB,EAAIiX,GAEJlZ,EAAMvG,OAAO,GAAI6f,EAAM7f,OAAO,GAAI8f,EAAO9f,OAAO,IAAK+f,EAAO/f,OAAO,IAEnEggB,EAAOhgB,OAAO,IAAKigB,EAAOjgB,OAAO,IAAKkgB,EAAOlgB,OAAO,IACpDmgB,EAAM/Y,EAAIA,EAAIA,EAAKoB,EACnB+N,EAAM4J,EAAKA,EAAK/Y,EAAKoB,EACrB4X,EAAMtZ,EAAKyP,EAAIhQ,EAAKiC,GAAK+N,EAAM/N,EAC/B6X,EAAMvZ,EAAKsZ,EAAI7Z,EAAKiC,GAAK+N,EAAM/N,EAC/B8X,EAAOxZ,EAAKuZ,EAAI/Z,GAAKkC,GAAK2X,EAAM3X,EAChC+X,EAAOzZ,EAAKwZ,EAAKR,EAAMtX,GAAK8X,EAAO9X,EACnCgY,EAAO1Z,EAAKyZ,EAAKR,EAAMvX,GAAK+X,EAAO/X,EACnCiY,EAAO3Z,EAAK0Z,EAAKP,EAAMzX,GAAKgY,EAAOhY,EACnCkY,EAAQ5Z,EAAK2Z,EAAKP,EAAM1X,GAAKiY,EAAOjY,EACpCmY,EAAQ7Z,EAAK4Z,EAAMT,EAAMzX,GAAKgY,EAAOhY,EACrCoY,EAAQ9Z,EAAK6Z,EAAMpa,EAAKiC,GAAK+N,EAAM/N,EACnCoO,EAAM9P,EAAK8Z,EAAMZ,EAAMxX,GAAK+X,EAAO/X,EACnCqO,EAAM/P,EAAK8P,EAAIiJ,EAAKrX,GAAK2X,EAAM3X,EAC/BX,EAAOf,EAAK+P,EAAIvQ,GAAKkC,GAC3B,IAAKqY,GAAK9Y,IAAI8Y,GAAK7Y,IAAIH,GAAOT,GAAI,MAAM,IAAI7I,MAAM,2BAClD,OAAOsJ,CACT,CAEA,MAAMgZ,GAAOhY,EAAM4W,QAAY9c,OAAWA,EAAW,CAAE4J,KAAMqT,KAiBhDkB,GDvDP,SAAsBvH,EAAoBwH,GAC9C,MAAM1iB,EAAUV,GAAyB2b,GAAY,IAAKC,KAAagG,GAAQ5hB,KAC/E,MAAO,IAAKU,EAAO0iB,GAAU1iB,SAC/B,CCoD4C2iB,CAC1C,CACE7gB,EAAGJ,GACH6G,EAAG5G,OAAO,GACVgF,GAAI6b,GACJ5d,EAAGyc,GACH1P,GAAIhQ,OAAO,iFACXiQ,GAAIjQ,OAAO,iFACX+P,EAAG/P,OAAO,GACVoQ,MAAM,EACNyC,KAAM,CAEJC,KAAM9S,OAAO,sEACb+S,YAAc+J,IACZ,MAAM7Z,EAAIyc,GACJuB,EAAKjhB,OAAO,sCACZkhB,GAAMjhB,GAAMD,OAAO,sCACnBmhB,EAAKnhB,OAAO,uCACZmgB,EAAKc,EACLG,EAAYphB,OAAO,uCAEnBqhB,EAAK1B,GAAWQ,EAAKrD,EAAG7Z,GACxBqe,EAAK3B,IAAYuB,EAAKpE,EAAG7Z,GAC/B,IAAIyU,EAAK/Q,EAAImW,EAAIuE,EAAKJ,EAAKK,EAAKH,EAAIle,GAChC2U,EAAKjR,GAAK0a,EAAKH,EAAKI,EAAKnB,EAAIld,GACjC,MAAMwU,EAAQC,EAAK0J,EACbzJ,EAAQC,EAAKwJ,EAGnB,GAFI3J,IAAOC,EAAKzU,EAAIyU,GAChBC,IAAOC,EAAK3U,EAAI2U,GAChBF,EAAK0J,GAAaxJ,EAAKwJ,EACzB,MAAM,IAAI7iB,MAAM,uCAAyCue,GAE3D,MAAO,CAAErF,QAAOC,KAAIC,QAAOC,KAAI,IAIrC2J,EAAAA","sources":["../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@walletconnect/utils/node_modules/viem/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@walletconnect/utils/node_modules/viem/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@walletconnect/utils/node_modules/viem/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@walletconnect/utils/node_modules/viem/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@walletconnect/utils/node_modules/viem/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@walletconnect/utils/node_modules/viem/node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean =\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function';\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\n\n// DRBG\n\nconst u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\nconst u8fr = (arr: ArrayLike<number>) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { anumber } from '@noble/hashes/utils';\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type IField, nLength, validateField } from './modular.ts';\nimport { bitLen, bitMask, validateObject } from './utils.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nfunction constTimeNegate<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  getPrecomputes(W: number, P: T, transform: Mapper<T>): T[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // Smaller version:\n      // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n      // TODO: check the scalar is less than group order?\n      // wNAF behavior is undefined otherwise. But have to carefully remove\n      // other checks before wNAF. ORDER == bits here.\n      // Accumulators\n      let p = c.ZERO;\n      let f = c.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(constTimeNegate(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(constTimeNegate(isNeg, precomputes[offset]));\n        }\n      }\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Parameters\n *\n * To initialize a weierstrass curve, one needs to pass following params:\n *\n * * a: formula param\n * * b: formula param\n * * Fp: finite field of prime characteristic P; may be complex (Fp2). Arithmetics is done in field\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * Gx: Base point (x, y) aka generator point. Gx = x coordinate\n * * Gy: ...y coordinate\n * * h: cofactor, usually 1. h*n = curve group order (n is only subgroup order)\n * * lowS: whether to enable (default) or disable \"low-s\" non-malleable signatures\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// prettier-ignore\nimport {\n  pippenger, validateBasic, wNAF,\n  type AffinePoint, type BasicCurve, type Group, type GroupConstructor\n} from './curve.ts';\n// prettier-ignore\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength, invert, mapHashToField, mod, validateField,\n  type IField\n} from './modular.ts';\n// prettier-ignore\nimport {\n  aInRange, abool,\n  bitMask,\n  bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes,\n  inRange, isBytes, memoized, numberToBytesBE, numberToHexUnpadded, validateObject,\n  type CHash, type Hex, type PrivKey\n} from './utils.ts';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\nexport type Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean; format?: 'compact' | 'der' | undefined };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  toAffine(iz?: T): AffinePoint<T>;\n  toHex(isCompressed?: boolean): string;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nexport type CurvePointsTypeWithLength<T> = Readonly<\n  CurvePointsType<T> & { nByteLength: number; nBitLength: number }\n>;\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>): CurvePointsTypeWithLength<T> {\n  const opts = validateBasic(curve);\n  validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowInfinityPoint: 'boolean',\n      allowedPrivateKeyLengths: 'array',\n      clearCofactor: 'function',\n      fromBytes: 'function',\n      isTorsionFree: 'function',\n      toBytes: 'function',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endo: CURVE.a must be 0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\nfunction numToSizedHex(num: bigint, size: number): string {\n  return bytesToHex(numberToBytesBE(num, size));\n}\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (isBytes(key)) key = bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length))\n        throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\n        'invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key\n      );\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    readonly px: T;\n    readonly py: T;\n    readonly pz: T;\n\n    constructor(px: T, py: T, pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py) || Fp.is0(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = FpInvertBatch(\n        Fp,\n        points.map((p) => p.pz)\n      );\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo, n: N } = CURVE;\n      aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this))\n        return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n\n      // Case c: endomorphism\n      /** See docs for {@link EndomorphismOpts} */\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const { endo, nBitLength } = CURVE;\n  const wnaf = wNAF(Point, endo ? Math.ceil(nBitLength / 2) : nBitLength);\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(\n  curve: CurveType\n): Readonly<CurveType & { nByteLength: number; nBitLength: number }> {\n  const opts = validateBasic(curve);\n  validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = bytesToNumberBE(tail);\n        if (!inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error(\n          'invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len\n        );\n      }\n    },\n  });\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      aInRange('r', r, _1n, CURVE_ORDER); // r in [1..N]\n      aInRange('s', s, _1n, CURVE_ORDER); // s in [1..N]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    /**\n     * @todo remove\n     * @deprecated\n     */\n    assertValidity(): void {}\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToSizedHex(radj, Fp.BYTES));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig(this);\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      const l = nByteLength;\n      return numToSizedHex(this.r, l) + numToSizedHex(this.s, l);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const arr = ensureBytes('key', item);\n    const len = arr.length;\n    const fpl = Fp.BYTES;\n    const compLen = fpl + 1; // e.g. 33 for 32\n    const uncompLen = 2 * fpl + 1; // e.g. 65 for 32\n    if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {\n      return undefined;\n    } else {\n      return len === compLen || len === uncompLen;\n    }\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicB) === false) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = bitMask(nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    aInRange('num < 2^' + nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return numberToBytesBE(num, nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const { lowS, prehash, format } = opts;\n\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der')\n      throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport type { CHash } from './abstract/utils.ts';\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): {\n  hash: CHash;\n  hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => Uint8Array;\n  randomBytes: typeof randomBytes;\n} {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, ...getHash(hash) });\n  return { ...create(defHash), create };\n}\n","/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport { createHasher, type Hasher, type HTFMethod, isogenyMap } from './abstract/hash-to-curve.ts';\nimport { Field, mod, pow2 } from './abstract/modular.ts';\nimport type { Hex, PrivKey } from './abstract/utils.ts';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './abstract/utils.ts';\nimport { mapToCurveSimpleSWU, type ProjPointType as PointType } from './abstract/weierstrass.ts';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    a: _0n,\n    b: BigInt(7),\n    Fp: Fpk1,\n    n: secp256k1N,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = /* @__PURE__ */ (() => secp256k1.ProjectivePoint)();\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    } as const\n  ))();\n\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n"],"names":["HMAC","Hash","constructor","hash","_key","super","finished","destroyed","ahash","key","toBytes","this","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","clean","buf","aexists","digestInto","out","abytes","destroy","_cloneInto","to","Object","getPrototypeOf","clone","hmac","message","_0n","BigInt","_1n","isBytes","a","ArrayBuffer","isView","name","item","abool","title","value","numberToHexUnpadded","num","hex","toString","hexToNumber","hasHexBuiltin","from","toHex","fromHex","hexes","Array","_","padStart","bytesToHex","bytes","asciis","_0","_9","A","F","f","asciiToBase16","ch","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","char","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","len","numberToBytesLE","ensureBytes","expectedLength","res","e","concatBytes","sum","arguments","isPosBig","inRange","min","max","aInRange","bitMask","u8n","u8fr","arr","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","Number","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","entries","memoized","fn","map","WeakMap","arg","get","_len2","args","_key2","computed","_2n","_3n","_4n","_5n","_8n","mod","b","result","pow2","x","power","modulo","invert","number","y","u","v","q","r","m","sqrt3mod4","p1div4","ORDER","root","pow","eql","sqr","sqrt5mod8","p5div8","mul","nv","sub","ONE","FpSqrt","P","Q","S","Z","_Fp","Field","FpLegendre","cc","Q1div2","is0","M","c","t","R","ZERO","t_tmp","exponent","tonelliShanks","FIELD_FIELDS","FpPow","p","d","FpInvertBatch","nums","passZero","inverted","fill","multipliedAcc","reduce","acc","invertedAcc","inv","reduceRight","p1mod2","powered","yes","zero","no","neg","nLength","nBitLength","anumber","_nBitLength","nByteLength","Math","ceil","bitLen","isLE","redef","BITS","BYTES","sqrtP","freeze","MASK","isOdd","lhs","rhs","add","div","sqrN","addN","subN","mulN","sqrt","fromBytes","invertBatch","lst","cmov","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","constTimeNegate","condition","negate","validateW","W","bits","calcWOpts","scalarBits","maxNumber","windows","windowSize","mask","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","offset","abs","isZero","isNeg","isNegF","offsetF","validateMSMPoints","points","forEach","validateMSMScalars","scalars","s","pointPrecomputes","pointWindowSizes","getW","pippenger","fieldN","plength","slength","buckets","floor","j","scalar","resI","sumI","double","validateBasic","curve","h","Gx","Gy","validateSigVerOpts","opts","lowS","prehash","DERErr","DER","Err","_tlv","encode","tag","data","E","dataLen","lenLen","decode","pos","first","lengthBytes","subarray","l","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","seq","numToSizedHex","size","weierstrassPoints","CURVE","allowInfinityPoint","allowedPrivateKeyLengths","clearCofactor","isTorsionFree","wrapPrivateKey","endo","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","isValidXY","left","right","_4a3","_27b2","normPrivateKeyToScalar","lengths","N","includes","error","aprjpoint","other","Point","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","fromAffine","normalizeZ","toInv","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","_setWindowSize","wnaf","setWindowSize","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","subtract","wNAF","wNAFCached","multiplyUnsafe","sc","I","hasPrecomputes","wNAFCachedUnsafe","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","G","cofactor","toRawBytes","isCompressed","elm","unsafeLadder","precomputeWindow","base","push","precomputes","wo","wNAFUnsafe","getPrecomputes","transform","comp","prev","delete","ProjectivePoint","isWithinCurveOrder","weierstrass","curveDef","randomBytes","bits2int","bits2int_modN","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrtError","suffix","isBiggerThanHalfOrder","slcNum","slice","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","mapHashToField","precompute","isProbPub","fpl","compLen","uncompLen","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","k","extraEntropy","ent","h1int","seedArgs","seed","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","C","drbg","hashLen","qByteLen","hmacFn","reset","_len","reseed","gen","sl","genUntil","pred","createHmacDrbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","format","isHex","isObj","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c1","c2","sha256"],"sourceRoot":""}